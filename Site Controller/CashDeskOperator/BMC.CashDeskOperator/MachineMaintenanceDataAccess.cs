#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BMC.CashDeskOperator
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using BMC.Common.Utilities;


    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "Exchange")]
    public partial class CMachineMaintenanceDataAccess : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        #endregion

        public CMachineMaintenanceDataAccess(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        [Function(Name = "dbo.rsp_GetMaintainSessionForInstallation")]
        public ISingleResult<CMaintenanceSession> GetMaintainSessionForInstallation([Parameter(Name = "InstallationNo", DbType = "Int")] System.Nullable<int> installationNo)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installationNo);
            return ((ISingleResult<CMaintenanceSession>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetEventsForMaintainSession")]
        public ISingleResult<GetEventsForMaintainSessionResult> GetEventsForMaintainSession([Parameter(Name = "SessionID", DbType = "Int")] System.Nullable<int> sessionID, [Parameter(Name = "InstallationNo", DbType = "Int")] System.Nullable<int> installationNo)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sessionID, installationNo);
            return ((ISingleResult<GetEventsForMaintainSessionResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_ManageMaintenance")]
        public int ManageMaintenance([Parameter(Name = "InstallationNo", DbType = "Int")] System.Nullable<int> installationNo, [Parameter(Name = "EventID", DbType = "Int")] System.Nullable<int> eventID, [Parameter(Name = "UserID", DbType = "Int")] System.Nullable<int> userID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installationNo, eventID, userID);
            return ((int)(result.ReturnValue));
        }
        
        [Function(Name = "dbo.rsp_CheckMachineMaintenance")]
        public int CheckMachineMaintenance([Parameter(Name = "InstallationNo", DbType = "Int")] System.Nullable<int> installationNo, [Parameter(Name = "Return", DbType = "Int")] ref System.Nullable<int> @return)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installationNo, @return);
            @return = ((System.Nullable<int>)(result.GetParameterValue(1)));
            return ((int)(@return));
        }

        [Function(Name = "dbo.usp_InsertMaintenanceReasonCategory")]
        public int InsertMaintenanceReasonCategory([Parameter(Name = "SessionID", DbType = "Int")] System.Nullable<int> sessionID, [Parameter(Name = "CategoryID", DbType = "Int")] System.Nullable<int> categoryID, [Parameter(Name = "ReasonID", DbType = "Int")] System.Nullable<int> reasonID, [Parameter(Name = "Comments", DbType = "VarChar(100)")] string comments, [Parameter(Name = "SiteID", DbType = "Int")] System.Nullable<int> siteID, [Parameter(Name = "MRCID", DbType = "Int")] ref System.Nullable<int> mRCID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sessionID, categoryID, reasonID, comments, siteID, mRCID);
            mRCID = ((System.Nullable<int>)(result.GetParameterValue(5)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_CloseMaintenance")]
        public int CloseMaintenance([Parameter(Name = "InstallationNo", DbType = "Int")] System.Nullable<int> installationNo, [Parameter(Name = "UserID", DbType = "Int")] System.Nullable<int> userID, [Parameter(Name = "SessionID", DbType = "Int")] ref System.Nullable<int> sessionID, [Parameter(Name = "Site_ID", DbType = "Int")] ref System.Nullable<int> site_ID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installationNo, userID, sessionID, site_ID);
            sessionID = ((System.Nullable<int>)(result.GetParameterValue(2)));
            site_ID = ((System.Nullable<int>)(result.GetParameterValue(3)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetSlotPortStatus")]
        public ISingleResult<CSlotPortStatus> GetSlotPortStatusForInstallation([Parameter(Name = "@Installation_No", DbType = "Int")] System.Nullable<int> installationNo)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installationNo);
            return ((ISingleResult<CSlotPortStatus>)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_UpdateSlotPortStatus")]
        public int UpdateSlotPortStatus([Parameter(Name = "@Installation_No", DbType = "Int")] System.Nullable<int> installationNo, [Parameter(Name = "@AuxSerialPort_Enabled", DbType = "Bit")] System.Nullable<bool> auxSerialPort, [Parameter(Name = "@GatSerialPort_Enabled", DbType = "Bit")] System.Nullable<bool> gatSerialPort, [Parameter(Name = "@SlotLinePort_Enabled", DbType = "Bit")] System.Nullable<bool> slotLinePort)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installationNo, auxSerialPort, gatSerialPort, slotLinePort);
            return ((int)(result.ReturnValue));
        }

    }

    public partial class CMaintenanceSession : INotifyPropertyChanged
    {

        private System.Nullable<int> _ID;

        private System.Nullable<int> _Installation_No;

        private System.Nullable<bool> _isAuthorized;

        private System.Nullable<int> _CreatedBy;

        private System.Nullable<System.DateTime> _CreatedOn;

        private System.Nullable<int> _ClosedBy;

        private System.Nullable<System.DateTime> _ClosedOn;

        private System.Nullable<bool> _IsSessionOpen;

        private string _SessionName;

        public CMaintenanceSession()
        {
        }

        [Column(Storage = "_ID", DbType = "Int")]
        public System.Nullable<int> ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }
        public string SessionName
        {
            get
            {
                return "Session_" + ID.ToString() +" (" + 
                     CreatedOn.Value.GetUniversalDateTimeFormatWithoutSeconds()+
                    (ClosedOn != null && ClosedOn.Value.Year != 1? " - " + ClosedOn.Value.GetUniversalDateTimeFormatWithoutSeconds() : "") + ")"; 
            }
            set{}
        }

        [Column(Storage = "_Installation_No", DbType = "Int")]
        public System.Nullable<int> Installation_No
        {
            get
            {
                return this._Installation_No;
            }
            set
            {
                if ((this._Installation_No != value))
                {
                    this._Installation_No = value;
                }
            }
        }

        [Column(Storage = "_isAuthorized", DbType = "Bit")]
        public System.Nullable<bool> isAuthorized
        {
            get
            {
                return this._isAuthorized;
            }
            set
            {
                if ((this._isAuthorized != value))
                {
                    this._isAuthorized = value;
                }
            }
        }

        [Column(Storage = "_CreatedBy", DbType = "Int")]
        public System.Nullable<int> CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if ((this._CreatedBy != value))
                {
                    this._CreatedBy = value;
                }
            }
        }

        [Column(Storage = "_CreatedOn", DbType = "DateTime")]
        public System.Nullable<System.DateTime> CreatedOn
        {
            get
            {
                return this._CreatedOn;
            }
            set
            {
                if ((this._CreatedOn != value))
                {
                    this._CreatedOn = value;
                }
            }
        }

        [Column(Storage = "_ClosedBy", DbType = "Int")]
        public System.Nullable<int> ClosedBy
        {
            get
            {
                return this._ClosedBy;
            }
            set
            {
                if ((this._ClosedBy != value))
                {
                    this._ClosedBy = value;
                }
            }
        }

        [Column(Storage = "_ClosedOn", DbType = "DateTime")]
        public System.Nullable<System.DateTime> ClosedOn
        {
            get
            {
                return this._ClosedOn;
            }
            set
            {
                if ((this._ClosedOn != value))
                {
                    this._ClosedOn = value;
                }
            }
        }

        [Column(Storage = "_IsSessionOpen", DbType = "Bit")]
        public System.Nullable<bool> IsSessionOpen
        {
            get
            {
                return this._IsSessionOpen;
            }
            set
            {
                if ((this._IsSessionOpen != value))
                {
                    this._IsSessionOpen = value;
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        public void PropertyChangedEvent(string propertyName)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public partial class GetEventsForMaintainSessionResult
    {

        private string _Details;

        private System.Nullable<System.DateTime> _Date;

        private System.Nullable<System.DateTime> _EventDate;

        private int _Event_No;

        private string _Event_Type;

        private System.Nullable<bool> _Event_Cleared;

        public GetEventsForMaintainSessionResult()
        {
        }

        [Column(Storage = "_Details", DbType = "VarChar(50)")]
        public string Details
        {
            get
            {
                return this._Details;
            }
            set
            {
                if ((this._Details != value))
                {
                    this._Details = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [Column(Storage = "_EventDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> EventDate
        {
            get
            {
                return this._EventDate;
            }
            set
            {
                if ((this._EventDate != value))
                {
                    this._EventDate = value;
                }
            }
        }

        [Column(Storage = "_Event_No", DbType = "Int NOT NULL")]
        public int Event_No
        {
            get
            {
                return this._Event_No;
            }
            set
            {
                if ((this._Event_No != value))
                {
                    this._Event_No = value;
                }
            }
        }

        [Column(Storage = "_Event_Type", DbType = "VarChar(50)")]
        public string Event_Type
        {
            get
            {
                return this._Event_Type;
            }
            set
            {
                if ((this._Event_Type != value))
                {
                    this._Event_Type = value;
                }
            }
        }

        [Column(Storage = "_Event_Cleared", DbType = "Bit")]
        public System.Nullable<bool> Event_Cleared
        {
            get
            {
                return this._Event_Cleared;
            }
            set
            {
                if ((this._Event_Cleared != value))
                {
                    this._Event_Cleared = value;
                }
            }
        }
    }

    public partial class CMaintenanceReasonCategory : INotifyPropertyChanged
    {

        private int _ID;

        private System.Nullable<int> _SessionID;

        private System.Nullable<int> _CategoryID;

        private System.Nullable<int> _ReasonID;

        private string _Comments;

        private System.Nullable<int> _Site_ID;

        private string _CategoryText;

        private string _ReasonText;

        public CMaintenanceReasonCategory()
        {
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.Always, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [Column(Storage = "_SessionID", DbType = "Int")]
        public System.Nullable<int> SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [Column(Storage = "_CategoryID", DbType = "Int")]
        public System.Nullable<int> CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if ((this._CategoryID != value))
                {
                    this._CategoryID = value;
                }
            }
        }

        [Column(Storage = "_ReasonID", DbType = "Int")]
        public System.Nullable<int> ReasonID
        {
            get
            {
                return this._ReasonID;
            }
            set
            {
                if ((this._ReasonID != value))
                {
                    this._ReasonID = value;
                }
            }
        }

        [Column(Storage = "_Comments", DbType = "VarChar(100)")]
        public string Comments
        {
            get
            {
                return this._Comments;
            }
            set
            {
                if ((this._Comments != value))
                {
                    this._Comments = value;
                }
            }
        }

        [Column(Storage = "_Site_ID", DbType = "Int")]
        public System.Nullable<int> Site_ID
        {
            get
            {
                return this._Site_ID;
            }
            set
            {
                if ((this._Site_ID != value))
                {
                    this._Site_ID = value;
                }
            }
        }

        public string CategoryText
        {
            get
            {
                return this._CategoryText;
            }
            set
            {
                if ((this._CategoryText != value))
                {
                    this._CategoryText = value;
                }
            }
        }

        public string ReasonText
        {
            get
            {
                return this._ReasonText;
            }
            set
            {
                if ((this._ReasonText != value))
                {
                    this._ReasonText = value;
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        public void PropertyChangedEvent(string propertyName)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public partial class CSlotPortStatus
    {
        private System.Nullable<bool> _AuxSerialPortEnabled;
        private System.Nullable<bool> _GatSerialPortEnabled;
        private System.Nullable<bool> _SlotLinePortEnabled;

        public CSlotPortStatus()
        {
        }

        [Column(Storage = "_AuxSerialPortEnabled", DbType = "Bit")]
        public System.Nullable<bool> AuxSerialPortEnabled
        {
            get
            {
                return this._AuxSerialPortEnabled;
            }
            set
            {
                if ((this._AuxSerialPortEnabled != value))
                {
                    this._AuxSerialPortEnabled = value;
                }
            }
        }

        [Column(Storage = "_GatSerialPortEnabled", DbType = "Bit")]
        public System.Nullable<bool> GatSerialPortEnabled
        {
            get
            {
                return this._GatSerialPortEnabled;
            }
            set
            {
                if ((this._GatSerialPortEnabled != value))
                {
                    this._GatSerialPortEnabled = value;
                }
            }
        }

        [Column(Storage = "_SlotLinePortEnabled", DbType = "Bit")]
        public System.Nullable<bool> SlotLinePortEnabled
        {
            get
            {
                return this._SlotLinePortEnabled;
            }
            set
            {
                if ((this._SlotLinePortEnabled != value))
                {
                    this._SlotLinePortEnabled = value;
                }
            }
        }
    }
}
#pragma warning restore 1591
