using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using BMC.Common.ExceptionManagement;
using BMC.DataAccess;
using System.Data.SqlClient;
using BMC.Transport; 
namespace BMC.DBInterface.CashDeskOperator
{
    public class PlayerDataDataAccess
    {

        public void UpdateRating_Status(long Sno, bool Status)
        {
            SqlParameter[] oParams = new SqlParameter[2];
            oParams[0] = new SqlParameter("@Sno", Sno);
            oParams[1] = new SqlParameter("@Status", Status);
            SqlHelper.ExecuteNonQuery(CommonDataAccess.ExchangeConnectionString, CommandType.StoredProcedure, "CMP.usp_UpdateRatingStatus", oParams);

        }
    }

}

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BMC.DBInterface.CashDeskOperator
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "Exchange")]
    public partial class PlayerRatingDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        #endregion

        public PlayerRatingDataContext() :
            base(CommonDataAccess.ExchangeConnectionString, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        public PlayerRatingDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        public PlayerRatingDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        public PlayerRatingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        public PlayerRatingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        [Function(Name = "CMP.rsp_GetPTRatings")]
        public ISingleResult<rsp_GetPTRatingsResult> rsp_GetPTRatings([Parameter(Name = "CardNumber", DbType = "Char(10)")] string cardNumber, [Parameter(Name = "StartDate", DbType = "DateTime")] DateTime startDate, [Parameter(Name = "EndDate", DbType = "DateTime")] DateTime endDate, [Parameter(Name = "MessageType", DbType = "VarChar(4)")] string messageType, [Parameter(Name = "SendStatus", DbType = "Bit")] bool sendStatus)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cardNumber, startDate, endDate, messageType, sendStatus);
            return ((ISingleResult<rsp_GetPTRatingsResult>)(result.ReturnValue));
        }
    }

    
}

