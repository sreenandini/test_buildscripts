#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using BMC.Transport.CashDeskOperatorEntity;
using BMC.Transport;

namespace BMC.DBInterface.CashDeskOperator
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using BMC.DataAccess;
    using System.Data.SqlClient;
    using BMC.Common.ExceptionManagement;
    using BMC.Transport;
    using BMC.Transport.CashDeskOperatorEntity;



    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "Exchange")]
    public partial class LinqDataAccessDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        #endregion

        public LinqDataAccessDataContext() :
            base(global::BMC.DBInterface.CashDeskOperator.Properties.Settings.Default.ExchangeConnectionString, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        public LinqDataAccessDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        public LinqDataAccessDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        public LinqDataAccessDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        public LinqDataAccessDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
            this.CommandTimeout = SqlHelper.LoadCommandTimeout();
        }

        [Function(Name = "dbo.rsp_FillTreasuryList")]
        public ISingleResult<FillTreasuryList> FillTreasuryList([Parameter(Name = "Bar_Pos_Name", DbType = "VarChar(10)")] string bar_Pos_Name)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bar_Pos_Name);
            return ((ISingleResult<FillTreasuryList>)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_UpdateFinalStatusTicketException")]
        public int UpdateFinalStatusTicketException([Parameter(Name = "TEID", DbType = "Int")] System.Nullable<int> tEID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tEID);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_ProcessHandpayOnDenomChange")]
        public int UpdateProcessHandpayOnDenomChange([Parameter(Name = "@Bar_Pos_Name", DbType = "VarChar(100)")] string sBarPos,
                                                    [Parameter(Name = "@User_ID", DbType = "Int")] int userID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sBarPos, userID);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_InsertTreasury")]
        public int InsertTreasury([Parameter(Name = "Installation_No", DbType = "Int")] System.Nullable<int> installation_No, [Parameter(Name = "Collection_No", DbType = "Int")] System.Nullable<int> collection_No, [Parameter(Name = "User_ID", DbType = "Int")] System.Nullable<int> user_ID, [Parameter(Name = "Treasury_Type", DbType = "VarChar(30)")] string treasury_Type, [Parameter(Name = "Treasury_Reason", DbType = "VarChar(200)")] string treasury_Reason, [Parameter(Name = "Treasury_Amount", DbType = "Money")] System.Nullable<decimal> treasury_Amount, [Parameter(Name = "Treasury_Allocated", DbType = "Bit")] System.Nullable<bool> treasury_Allocated, [Parameter(Name = "Treasury_Membership_No", DbType = "VarChar(50)")] string treasury_Membership_No, [Parameter(Name = "Treasury_Reason_Code", DbType = "Int")] System.Nullable<int> treasury_Reason_Code, [Parameter(Name = "Treasury_Issuer_User_No", DbType = "Int")] System.Nullable<int> treasury_Issuer_User_No, [Parameter(Name = "Treasury_Temp", DbType = "Bit")] System.Nullable<bool> treasury_Temp, [Parameter(Name = "Treasury_Float_Issued_By", DbType = "Int")] System.Nullable<int> treasury_Float_Issued_By, [Parameter(Name = "Treasury_Actual_Date", DbType = "DateTime")] System.Nullable<System.DateTime> treasury_Actual_Date, [Parameter(Name = "CustomerID", DbType = "BigInt")] System.Nullable<long> customerID, [Parameter(Name = "@AuthorizedUser_No", DbType = "BigInt")] System.Nullable<long> AuthorizedUser_No, [Parameter(Name = "@Authorized_Date", DbType = "DateTime")] System.Nullable<System.DateTime> Authorized_Date, [Parameter(Name = "IsManualAttendantPay", DbType = "Int")] System.Nullable<int> IsManualAttendantPay, [Parameter(Name = "TreasuryNo", DbType = "Int")] ref System.Nullable<int> treasuryNo, [Parameter(Name = "IsExport", DbType = "Int")] System.Nullable<int> IsExport)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installation_No, collection_No, user_ID, treasury_Type, treasury_Reason, treasury_Amount, treasury_Allocated, treasury_Membership_No, treasury_Reason_Code, treasury_Issuer_User_No, treasury_Temp, treasury_Float_Issued_By, treasury_Actual_Date, customerID, AuthorizedUser_No, Authorized_Date, IsManualAttendantPay, treasuryNo, IsExport);
            treasuryNo = ((System.Nullable<int>)(result.GetParameterValue(17)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_VoidTreasury_CreateNegTran")]
        public int VoidCreate([Parameter(Name = "TreasuryNo", DbType = "Int")] System.Nullable<int> treasuryNo,
            [Parameter(Name = "VoidedDate", DbType = "Datetime")] System.Nullable<DateTime> VoidedDate,
            [Parameter(Name = "UserNo", DbType = "Int")] System.Nullable<int> userNo, [Parameter(Name = "OutVal", DbType = "Int")] ref System.Nullable<int> outVal)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), treasuryNo, VoidedDate,userNo, outVal);
            outVal = ((System.Nullable<int>)(result.GetParameterValue(3)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetInstallationList")]
        public ISingleResult<InstallationListResult> GetInstallationList()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<InstallationListResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetInstallationNumber")]
        public ISingleResult<InstallationFromTicket> GetInstallationNumber([Parameter(DbType = "VarChar(20)")] string strbarcode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), strbarcode);
            return ((ISingleResult<InstallationFromTicket>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetValidationLength")]
        public int GetValidationLength([Parameter(Name = "Installation_No", DbType = "Int")] System.Nullable<int> installation_No, [Parameter(Name = "Validation_Length", DbType = "Int")] ref System.Nullable<int> validation_Length)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installation_No, validation_Length);
            validation_Length = ((System.Nullable<int>)(result.GetParameterValue(1)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_CheckPromotionalTicket")]
        public int CheckPromotionalTicket([Parameter(Name = "Barcode", DbType = "VarChar(32)")] string barcode, [Parameter(Name = "IsPromotional", DbType = "Int")] ref System.Nullable<int> isPromotional)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), barcode, isPromotional);
            isPromotional = ((System.Nullable<int>)(result.GetParameterValue(1)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.esp_CreateTicketComplete")]
        public int CreateTicketComplete([Parameter(Name = "Barcode", DbType = "VarChar(32)")] string barcode, [Parameter(Name = "IssuedUser", DbType = "VarChar(50)")] string IssuedUser, [Parameter(Name = "RedeemedUser", DbType = "VarChar(50)")] string RedeemedUser, [Parameter(DbType = "Int")] ref System.Nullable<int> retResult)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), barcode,IssuedUser,RedeemedUser,retResult);
            retResult = ((System.Nullable<int>)(result.GetParameterValue(3)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_InsertException")]
        public int InsertException([Parameter(Name = "Installation_ID", DbType = "Int")] System.Nullable<int> installation_ID, [Parameter(Name = "Exception_Type", DbType = "SmallInt")] System.Nullable<short> exception_Type, [Parameter(Name = "Details", DbType = "VarChar(255)")] string details, [Parameter(Name = "Reference", DbType = "VarChar(100)")] string reference, [Parameter(Name = "User", DbType = "VarChar(50)")] string user)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installation_ID, exception_Type, details, reference, user);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetTicketDetails")]
        public int GetTicketDetails([Parameter(Name = "BarCode", DbType = "Char(32)")] string barCode, [Parameter(Name = "PrintDevice", DbType = "VarChar(20)")] ref string printDevice, [Parameter(Name = "PayDevice", DbType = "VarChar(20)")] ref string payDevice, [Parameter(Name = "PayDate", DbType = "DateTime")] ref System.Nullable<System.DateTime> payDate, [Parameter(Name = "Amount", DbType = "Int")] ref System.Nullable<int> amount)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), barCode, printDevice, payDevice, payDate, amount);
            printDevice = ((string)(result.GetParameterValue(1)));
            payDevice = ((string)(result.GetParameterValue(2)));
            payDate = ((System.Nullable<System.DateTime>)(result.GetParameterValue(3)));
            amount = ((System.Nullable<int>)(result.GetParameterValue(4)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.pCheckSDGTicket")]
        public int CheckSDGTicket([Parameter(DbType = "VarChar(32)")] string strBarcode, [Parameter(DbType = "VarChar(20)")] string strDeviceID, [Parameter(DbType = "Int")] ref System.Nullable<int> iResult)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), strBarcode, strDeviceID, iResult);
            iResult = ((System.Nullable<int>)(result.GetParameterValue(2)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetAssetNumber")]
        public ISingleResult<AssetNumberResult> GetAssetNumber([Parameter(Name = "Installation_No", DbType = "Int")] System.Nullable<int> installation_No)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installation_No);
            return ((ISingleResult<AssetNumberResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetPositionCurrentStatus")]
        public ISingleResult<PositionCurrentStatusResult> GetPositionCurrentStatus(
            [Parameter(Name = "AllPosition", DbType = "Bit")] System.Nullable<bool> allPosition,
            [Parameter(Name = "VLTAAMS", DbType = "Bit")] System.Nullable<bool> vLTAAMS,
            [Parameter(Name = "VLTVerification", DbType = "Bit")] System.Nullable<bool> vLTVerification,
            [Parameter(Name = "GameAAMS", DbType = "Bit")] System.Nullable<bool> gameAAMS,
            [Parameter(Name = "GameVerification", DbType = "Bit")] System.Nullable<bool> gameVerification,
            [Parameter(Name = "gameEnableAAMS", DbType = "Bit")] System.Nullable<bool> gameEnableAAMS,
            [Parameter(Name = "BADAAMSEnableDisable", DbType = "Bit")] System.Nullable<bool> BADAAMSEnableDisable,
            [Parameter(Name = "BMCEnterpriseStatus", DbType = "Bit")] System.Nullable<bool> BMCEnterpriseStatus)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), allPosition, vLTAAMS, vLTVerification, gameAAMS, gameVerification, gameEnableAAMS, BADAAMSEnableDisable, BMCEnterpriseStatus);
            return ((ISingleResult<PositionCurrentStatusResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.usp_EditSetting")]
        public ISingleResult<EditSetting> EditSetting([Parameter(Name = "Setting_ID", DbType = "Int")] System.Nullable<int> setting_ID, [Parameter(Name = "Setting_Name", DbType = "VarChar(100)")] string setting_Name, [Parameter(Name = "Setting_Value", DbType = "VarChar(100)")] string setting_Value, [Parameter(Name = "Setting_Description", DbType = "VarChar(100)")] string setting_Description)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), setting_ID, setting_Name, setting_Value, setting_Description);
            return ((ISingleResult<EditSetting>)(result.ReturnValue));
        }

        public string GetEPIDetails(int installation_No)
        {
            string EPIDetails = string.Empty;
            DataSet dtInstallations = SqlHelper.ExecuteDataset(CommonDataAccess.ExchangeConnectionString,
                CommandType.StoredProcedure, "usp_GetEPIDetails", new SqlParameter[1]{ 
                    DataBaseServiceHandler.AddParameter<int >("@Installation_No", DbType.Int32, installation_No)});
            if (dtInstallations != null && dtInstallations.Tables.Count > 0)
            {
                EPIDetails = dtInstallations.Tables[0].Rows[0]["EPIDetails"].ToString();
            }
            return EPIDetails;
        }
        [Function(Name = "dbo.rsp_GetHandpayDetailsFromSlipNo")]
        public ISingleResult<HandpayEntities> GetHpDetails([Parameter(DbType = "int")] int TEID)
        {

            try
            {
                IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), TEID);
                return ((ISingleResult<HandpayEntities>)(result.ReturnValue));
            }
            catch (Exception ex)
            {
                ExceptionManager.Publish(ex);
                return null;
            }
        }
        [Function(Name = "dbo.usp_InsertTreasuryCage")]
        public int InsertTreasuryCage([Parameter(Name = "Installation_No", DbType = "Int")] System.Nullable<int> installation_No, [Parameter(Name = "Collection_No", DbType = "Int")] System.Nullable<int> collection_No, [Parameter(Name = "User_ID", DbType = "VARCHAR(50)")] string user_ID, [Parameter(Name = "Treasury_Type", DbType = "VarChar(30)")] string treasury_Type, [Parameter(Name = "Treasury_Reason", DbType = "VarChar(200)")] string treasury_Reason, [Parameter(Name = "Treasury_Amount", DbType = "Money")] System.Nullable<decimal> treasury_Amount, [Parameter(Name = "Treasury_Allocated", DbType = "Bit")] System.Nullable<bool> treasury_Allocated, [Parameter(Name = "Treasury_Membership_No", DbType = "VarChar(50)")] string treasury_Membership_No, [Parameter(Name = "Treasury_Reason_Code", DbType = "Int")] System.Nullable<int> treasury_Reason_Code, [Parameter(Name = "Treasury_Issuer_User_No", DbType = "Int")] System.Nullable<int> treasury_Issuer_User_No, [Parameter(Name = "Treasury_Temp", DbType = "Bit")] System.Nullable<bool> treasury_Temp, [Parameter(Name = "Treasury_Float_Issued_By", DbType = "Int")] System.Nullable<int> treasury_Float_Issued_By, [Parameter(Name = "Treasury_Actual_Date", DbType = "DateTime")] System.Nullable<System.DateTime> treasury_Actual_Date, [Parameter(Name = "CustomerID", DbType = "VARCHAR(50)")] string customerID, [Parameter(Name = "@AuthorizedUser_No", DbType = "VARCHAR(50)")] String AuthorizedUser_No, [Parameter(Name = "@Authorized_Date", DbType = "DateTime")] System.Nullable<System.DateTime> Authorized_Date, [Parameter(Name = "IsManualAttendantPay", DbType = "Int")] System.Nullable<int> IsManualAttendantPay, [Parameter(Name = "SequenceNumber ", DbType = "int")] int SequenceNumber, [Parameter(Name = "TreasuryNo", DbType = "Int")] ref System.Nullable<int> treasuryNo)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), installation_No, collection_No, user_ID, treasury_Type, treasury_Reason, treasury_Amount, treasury_Allocated, treasury_Membership_No, treasury_Reason_Code, treasury_Issuer_User_No, treasury_Temp, treasury_Float_Issued_By, treasury_Actual_Date, customerID, AuthorizedUser_No, Authorized_Date, IsManualAttendantPay, SequenceNumber, treasuryNo);
            treasuryNo = ((System.Nullable<int>)(result.GetParameterValue(17)));
            return ((int)(result.ReturnValue));
        }
        public DataSet createTickeException_HandpayCAGE(int Bar_Pos, Double TicketValue, string Server, int isHandpayResponse, string HP_Type)
        {
            int Result = 0;
            SqlParameter[] oParams = new SqlParameter[6];
            oParams[0] = new SqlParameter("Bar_Pos_Name", Bar_Pos);
            oParams[1] = new SqlParameter("Ticket_Value", TicketValue);
            oParams[2] = new SqlParameter("server", Server);
            oParams[3] = new SqlParameter("isHandpayResponse", isHandpayResponse);
            oParams[4] = new SqlParameter("HP_Type", HP_Type);
            oParams[5] = new SqlParameter("retResult", Result);
            oParams[5].Direction = ParameterDirection.InputOutput;
            return DataAccess.SqlHelper.ExecuteDataset(CommonDataAccess.ExchangeConnectionString, CommandType.StoredProcedure, "usp_createTickeException_HandpayCage", oParams);
        }

        [Function(Name = "dbo.rsp_GetCashierTransactions")]
        public ISingleResult<CashierTransactions> GetCashierTransactions([Parameter(DbType = "DateTime")] System.Nullable<System.DateTime> startdate, [Parameter(DbType = "DateTime")] System.Nullable<System.DateTime> enddate, [Parameter(DbType = "Int")] System.Nullable<int> User, [Parameter(DbType = "Int")] System.Nullable<int> Route_no)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startdate, enddate, User, Route_no);
            return ((ISingleResult<CashierTransactions>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetCashierTransactionsDetails")]
        public ISingleResult<CashierTransactionsDetails> GetCashierTransactionsDetails([Parameter(DbType = "Bit")] System.Nullable<bool> isCDMPaid, [Parameter(DbType = "Bit")] System.Nullable<bool> isCDMPrinted,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isHandPay,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isShortpay,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isVoidVoucher,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isJackpot,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isProgressive,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isVoid,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isMachinePaid, [Parameter(DbType = "Bit")] System.Nullable<bool> isMachinePrinted,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isActive, [Parameter(DbType = "Bit")] System.Nullable<bool> isVoidCancel,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isExpired, [Parameter(DbType = "Bit")] System.Nullable<bool> isException,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isLiability, [Parameter(DbType = "Bit")] System.Nullable<bool> isPromo,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isNonCashableIN, [Parameter(DbType = "Bit")] System.Nullable<bool> isNonCashableOut,
            [Parameter(DbType = "DateTime")] System.Nullable<System.DateTime> startdate,
            [Parameter(DbType = "DateTime")] System.Nullable<System.DateTime> enddate, [Parameter(DbType = "Int")] System.Nullable<int> User,
            [Parameter(DbType = "Int")] System.Nullable<int> Route_No,
            [Parameter(DbType = "Bit")] System.Nullable<bool> isOffline)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), isCDMPaid, isCDMPrinted,
                isHandPay, isShortpay,isVoidVoucher, isJackpot, isProgressive, isVoid, isMachinePaid, isMachinePrinted,
                 isActive, isVoidCancel, isExpired, isException, isLiability, isPromo,
                isNonCashableIN, isNonCashableOut, startdate, enddate, User, Route_No,isOffline);
            return ((ISingleResult<CashierTransactionsDetails>)(result.ReturnValue));
        }
        [Function(Name = "dbo.rsp_ValidateSiteCode")]
        public ISingleResult<ValidateSiteCode> ValidateSiteCode([Parameter(Name = "SiteCode", DbType = "VarChar(10)")] string siteCode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), siteCode);
            return ((ISingleResult<ValidateSiteCode>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_ValidateClientSiteCode")]
        public int ValidateClientSiteCode([Parameter(Name = "ClientSiteCode", DbType = "VarChar(10)")] string clientSiteCode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientSiteCode);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_CheckHandpayProcessed")]
        public int CheckIfHandpayProcessed
            (
            [Parameter(DbType = "DateTime")] System.Nullable<DateTime> TreasuryDate,
            [Parameter(DbType = "float")] System.Nullable<double> TreasuryAmount,
            [Parameter(DbType = "int")] System.Nullable<int> InstallationNo,
            [Parameter(DbType = "Varchar(50)")] string TreasuryType,
            [Parameter(DbType = "Int")] System.Nullable<int> TEID,
            [Parameter(DbType = "Int")] ref System.Nullable<int> Result
           )
        {
            IExecuteResult result = this.ExecuteMethodCall(this, (MethodInfo)(MethodInfo.GetCurrentMethod()), TreasuryDate, TreasuryAmount,
                InstallationNo, TreasuryType, TEID, Result);

            Result = ((System.Nullable<int>)(result.GetParameterValue(5)));
            return ((int)Result);
        }


        [Function(Name = "dbo.usp_GetBarPositionDetails")]
        public ISingleResult<BarPositions> GetBarPositions()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<BarPositions>)(result.ReturnValue));
        }

        //[Function(Name = "dbo.rsp_GetTreasury_Date")]
        //public DateTime GetTreasuryDate([Parameter(Name = "TreasuryID", DbType = "Int")] int Treasury_ID)
        //{
        //    IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), Treasury_ID);
        //    return ((DateTime)(result.ReturnValue));
        //}

        [Function(Name = "dbo.rsp_GetOperationalHours")]
        public int GetOperationalHours([Parameter(Name = "Date", DbType = "DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name = "OperationalHours", DbType = "Float")] ref System.Nullable<double> operationalHours)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, operationalHours);
            operationalHours = ((System.Nullable<double>)(result.GetParameterValue(1)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetDenomValue")]
        public ISingleResult<DenomValueResult> GetDenomValue([Parameter(Name = "Stock_No", DbType = "Varchar(50)")] string stock_No)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), stock_No);
            return ((ISingleResult<DenomValueResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetUserNoBySecurityUserID")]
        public int rsp_GetUserNoBySecurityUserID([Parameter(Name = "SecurityUserID", DbType = "Int")] System.Nullable<int> securityUserID, [Parameter(Name = "UserNo", DbType = "Int")] ref System.Nullable<int> userNo)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), securityUserID, userNo);
            userNo = ((System.Nullable<int>)(result.GetParameterValue(1)));
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetRouteCollection")]
        public ISingleResult<RouteCollection> GetRouteCollection()
        {
            var result = ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<RouteCollection>)(result.ReturnValue));
        }
        //Promotional-Ticket-12.4.1
        [Function(Name = "dbo.rsp_GetVoucherPromotionDetails")]
        public ISingleResult<PromotionalClassHistoryDetails> GetPromoHistoryDetails(
            [Parameter(DbType = "int")] System.Nullable<int> PromotionID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), PromotionID);
            return ((ISingleResult<PromotionalClassHistoryDetails>)(result.ReturnValue));
        }
        [Function(Name = "dbo.rsp_SelectPromotionHistory")]
        public ISingleResult<PromotionalClassVoidDetails> GetPromoVoidDetails(
            [Parameter(DbType = "int")] System.Nullable<int> type,
            [Parameter(Name = "NoOfRecords", DbType = "Int")] System.Nullable<int> noOfRecords)
            
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type,noOfRecords);
            return ((ISingleResult<PromotionalClassVoidDetails>)(result.ReturnValue));
        }


        //Promotional History 
        //[Function(Name = "dbo.rsp_SelectPromotionHistory")]
        //public ISingleResult<PromotionalClass> GetPromoHistory(
        //    [Parameter(DbType = "int")] System.Nullable<int> type)
        //{
        //    IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type);
        //    return ((ISingleResult<PromotionalClass>)(result.ReturnValue));
        //}
        [Function(Name = "dbo.rsp_SelectPromotionHistory")]
        public ISingleResult<PromotionalClass> GetPromoHistory(
            [Parameter(DbType = "Int")] System.Nullable<int> type, 
            [Parameter(Name = "NoOfRecords", DbType = "Int")] System.Nullable<int> noOfRecords)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, noOfRecords);
            return ((ISingleResult<PromotionalClass>)(result.ReturnValue));
        }
        [Function(Name = "dbo.rsp_IsTISPrintedTicket")]
        public int rsp_IsTISPrintedTicket([Parameter(Name = "Barcode", DbType = "Char(32)")] string barcode, [Parameter(Name = "Result", DbType = "Bit")] ref System.Nullable<bool> result)
        {
            IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), barcode, result);
            result = ((System.Nullable<bool>)(result1.GetParameterValue(1)));
            return ((int)(result1.ReturnValue));
        }
        [Function(Name = "dbo.rsp_SelectTISPromotionDetails")]
        public ISingleResult<TISPromotionalClassDetails> GetTISPromoDetails([Parameter(Name = "StartDate", DbType = "DateTime")] System.Nullable<System.DateTime> startDate, [Parameter(Name = "EndDate", DbType = "DateTime")] System.Nullable<System.DateTime> endDate)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate);
            return ((ISingleResult<TISPromotionalClassDetails>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetVoucherInformation")]
        public ISingleResult<VoucherInformation> GetVoucherDetails([Parameter(Name = "strBarCode", DbType = "Varchar(50)")] string BarCode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())),BarCode);
            return ((ISingleResult<VoucherInformation>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetGamePlayInfoForCurrentSession")]
        public ISingleResult<SessionGamePlayDetails> GetSessionGamePlayDetails()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<SessionGamePlayDetails>)(result.ReturnValue));
        }

        [Function(Name = "dbo.rsp_GetInstallationForActiveSession")]
        public ISingleResult<ActiveSessionInstallations> GetInstallationForActiveSession()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<ActiveSessionInstallations>)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.rsp_CDM_GetCashierTransactionsDetails_Summary")]
        public ISingleResult<rsp_CDM_GetCashierTransactionsSummary> GetCashierTransactionsSummary_New([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "DateTime")] System.Nullable<System.DateTime> startdate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "DateTime")] System.Nullable<System.DateTime> enddate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "UserID", DbType = "Int")] System.Nullable<int> UserID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "Route_No", DbType = "Int")] System.Nullable<int> route_No)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startdate, enddate, UserID, route_No);
            return ((ISingleResult<rsp_CDM_GetCashierTransactionsSummary>)(result.ReturnValue));
        }

    	[global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.rsp_CDM_GetCashierTransactionsDetails")]
        public ISingleResult<rsp_CDM_GetCashierTransactionsDetails_New> rsp_CDM_GetCashierTransactionsDetails_New(
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "DateTime")] System.Nullable<System.DateTime> startdate,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "DateTime")] System.Nullable<System.DateTime> enddate,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "UserID", DbType = "Int")] System.Nullable<int> userID,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "Route_No", DbType = "Int")] System.Nullable<int> route_No,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isCDMPaid,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isCDMPrinted,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isHandPay,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isShortpay,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isVoidVoucher,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isJackpot,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isProgressive,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isVoid,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isMachinePaid,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isMachinePrinted,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isActive,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isVoidCancel,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isExpired,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isException,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isLiability,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isPromo,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isNonCashableIN,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isNonCashableOut,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isOffline,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isOutstandingHandpays)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startdate, enddate, userID, route_No, isCDMPaid, isCDMPrinted, isHandPay, isShortpay, isVoidVoucher, isJackpot, isProgressive, isVoid, isMachinePaid, isMachinePrinted, isActive, isVoidCancel, isExpired, isException, isLiability, isPromo, isNonCashableIN, isNonCashableOut, isOffline, isOutstandingHandpays);
            return ((ISingleResult<rsp_CDM_GetCashierTransactionsDetails_New>)(result.ReturnValue));
        }
	 
        [Function(Name = "dbo.rsp_ValidateVoucherForMultipleVoucherRedemption")]
        public ISingleResult<rsp_ValidateVoucherForMultipleVoucherRedemptionResult> ValidateVoucherForMultipleVoucherRedemption([Parameter(Name = "Barcode", DbType = "VarChar(32)")] string barcode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), barcode);
            return ((ISingleResult<rsp_ValidateVoucherForMultipleVoucherRedemptionResult>)(result.ReturnValue));
        }

    }

}
#pragma warning restore 1591
