//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 

using System;
using System.Data;
using BMC.Common;
using BMC.Common.Security;
using BMC.Common.ConfigurationManagement;
using BMC.Common.ExceptionManagement;
using BMC.Common.LogManagement;
using Microsoft.Win32;

namespace BMC.BusinessClasses.Proxy
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Web.Services.WebServiceBinding(Name = "EnterpriseWebServiceSoap", Namespace = "http://tempuri.org/")]
    internal class Proxy : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private AuthenticationInformation authenticationInformationValueField;

        private System.Threading.SendOrPostCallback ImportDataOperationCompleted;

        private System.Threading.SendOrPostCallback ImportCompressedDataOperationCompleted;

        private System.Threading.SendOrPostCallback LogSiteEventOperationCompleted;

        private System.Threading.SendOrPostCallback HelloWebServiceOperationCompleted;

        private System.Threading.SendOrPostCallback GetInstallationDataOperationCompleted;

        private System.Threading.SendOrPostCallback ImportHourlyStatisticsDataOperationCompleted;

        private System.Threading.SendOrPostCallback InsertTreasuryEntriesOperationCompleted;

        private System.Threading.SendOrPostCallback GetZonesDataOperationCompleted;

        private System.Threading.SendOrPostCallback GetBarPositionsDataOperationCompleted;

        private System.Threading.SendOrPostCallback GetMachineDataOperationCompleted;

        private System.Threading.SendOrPostCallback GetLatestMeterHistoryOperationCompleted;

        private System.Threading.SendOrPostCallback GetLatestSiteBatchIDOperationCompleted;

        private System.Threading.SendOrPostCallback InsertReadOperationCompleted;

        private System.Threading.SendOrPostCallback CreateInstallationOperationCompleted;

        private System.Threading.SendOrPostCallback EnhancedEnrollmentForOfflineOperationCompleted;

        private System.Threading.SendOrPostCallback CloseInstallationOperationCompleted;

        private System.Threading.SendOrPostCallback ConvertInstallationOperationCompleted;

        private System.Threading.SendOrPostCallback SwapInstallationOperationCompleted;

        private System.Threading.SendOrPostCallback ImportInstallationUpdateOperationCompleted;

        private System.Threading.SendOrPostCallback GetInstallationNumberOperationCompleted;

        private System.Threading.SendOrPostCallback ImportMeterHistoryOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateBarPositionCentralStatusBySiteIDOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSiteStatsInEnterpriseOperationCompleted;

        private System.Threading.SendOrPostCallback GetPlannedConversionOperationCompleted;

        private System.Threading.SendOrPostCallback PlannedConversionOperationCompleted;

        private System.Threading.SendOrPostCallback GetCurrentServiceCallsOperationCompleted;

        private System.Threading.SendOrPostCallback GetOpenServiceCallsOperationCompleted;

        private System.Threading.SendOrPostCallback GetServiceNotesOperationCompleted;

        private System.Threading.SendOrPostCallback CloseServiceCallOperationCompleted;

        private System.Threading.SendOrPostCallback InsertServiceNotesOperationCompleted;

        private System.Threading.SendOrPostCallback EscalateServiceOperationCompleted;

        private System.Threading.SendOrPostCallback GetBarPositionStatusOperationCompleted;

        private System.Threading.SendOrPostCallback GetWeeklyCollectionDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback GetHqInstallationIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetCashDeskServiceFaultsOperationCompleted;

        private System.Threading.SendOrPostCallback GetRemediesOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateInstallationGameOperationCompleted;

        private System.Threading.SendOrPostCallback GetAssetDetailsOperationCompleted;

        public Proxy(string siteCode)
        {
            RegistryKey RegKey;
            RegKey = Registry.LocalMachine.OpenSubKey(ConfigManager.Read(Constants.CONSTANT_REGISTRYPATH));
            this.AuthenticationInformationValue = new AuthenticationInformation();
            this.AuthenticationInformationValue.SiteCode = siteCode;

            if (ConfigManager.Read("Server").ToLower() != "enterprise")
                this.Url = RegKey.GetValue("BGSWebService").ToString();
            else
                this.Url = BMC.DataAccess.DataBaseServiceHandler.ExecuteScalar
                    <string>
                    (GetConnectionString(),
                     CommandType.Text,
                     "Select isNull(WebURL,'') from Site Where Site_Code = '" + siteCode + "'");
            
            this.AuthenticationInformationValue.EnterprisePassKey = GetEnterprisePasskey();
            this.AuthenticationInformationValue.ExchangePassKey = GetExchangePasskey();
        }

        public string WebURL
        {
            set { this.Url = value; }
            get { return this.Url; }
        }

        public string GetEnterprisePasskey()
        {
            string RegPassKey;
            RegistryKey key = Registry.LocalMachine.OpenSubKey(ConfigManager.Read(Constants.CONSTANT_REGISTRYPATH), true);
            RegPassKey = key.GetValue("EnterpriseKey", (new Random()).Next().ToString()).ToString();
            key.Close();
            return RegPassKey;
        }

        private string GetExchangePasskey()
        {
            ConfigManager.SetConfigurationMode(ConfigManager.ConfigurationMode.AppConfig);

            if (ConfigManager.Read("Server").ToLower() == "enterprise")
                return BMC.DataAccess.DataBaseServiceHandler.ExecuteScalar<string>
                    (GetConnectionString(),
                     CommandType.Text,
                     "Select isNull(ExchangeKey, '0000') As ExchangePasskey from Site Where Site_Code = '" + AuthenticationInformationValue.SiteCode + "'");

            RegistryKey key = Registry.LocalMachine.OpenSubKey(ConfigManager.Read("RegistryPath"));
            if (key != null) return key.GetValue("ExchangeKey").ToString();

            ExceptionManager.Publish(new Exception("Exchange key not set"));
            return "Exchange";
        }

        private string GetConnectionString()
        {
            string sKey = string.Empty;
            bool bUseHex = true;
            RegistryKey RegKey;
            string SQLConnect = "";
            ConfigManager.SetConfigurationMode(ConfigManager.ConfigurationMode.AppConfig);
            try
            {
                ConfigManager.Read("RegistryPath");
                RegKey = Registry.LocalMachine.OpenSubKey(ConfigManager.Read("RegistryPath"));
                SQLConnect = RegKey.GetValue("SQLConnect").ToString();
                RegKey.Close();
                if (!SQLConnect.ToUpper().Contains("SERVER"))
                {
                    BGSGeneral.cConstants objBGSConstants = new BGSGeneral.cConstants();
                    BGSEncryptDecrypt.clsBlowFish objDecrypt = new BGSEncryptDecrypt.clsBlowFish();
                    sKey = "";
                    return objDecrypt.DecryptString(ref SQLConnect, ref sKey, ref bUseHex);
                }
            }
            catch (Exception ex)
            {
                LogManager.WriteLog("Error reading registry:" + ex.Message, LogManager.enumLogLevel.Error);
            }
            return SQLConnect;
        }

        public AuthenticationInformation AuthenticationInformationValue
        {
            get
            {
                return this.authenticationInformationValueField;
            }
            set
            {
                this.authenticationInformationValueField = value;
            }
        }

        /// <remarks/>
        public event ImportDataCompletedEventHandler ImportDataCompleted;

        /// <remarks/>
        public event ImportCompressedDataCompletedEventHandler ImportCompressedDataCompleted;

        /// <remarks/>
        public event LogSiteEventCompletedEventHandler LogSiteEventCompleted;

        /// <remarks/>
        public event HelloWebServiceCompletedEventHandler HelloWebServiceCompleted;

        /// <remarks/>
        public event GetInstallationDataCompletedEventHandler GetInstallationDataCompleted;

        /// <remarks/>
        public event ImportHourlyStatisticsDataCompletedEventHandler ImportHourlyStatisticsDataCompleted;

        /// <remarks/>
        public event InsertTreasuryEntriesCompletedEventHandler InsertTreasuryEntriesCompleted;

        /// <remarks/>
        public event GetZonesDataCompletedEventHandler GetZonesDataCompleted;

        /// <remarks/>
        public event GetBarPositionsDataCompletedEventHandler GetBarPositionsDataCompleted;

        /// <remarks/>
        public event GetMachineDataCompletedEventHandler GetMachineDataCompleted;

        /// <remarks/>
        public event GetLatestMeterHistoryCompletedEventHandler GetLatestMeterHistoryCompleted;

        /// <remarks/>
        public event GetLatestSiteBatchIDCompletedEventHandler GetLatestSiteBatchIDCompleted;

        /// <remarks/>
        public event InsertReadCompletedEventHandler InsertReadCompleted;

        /// <remarks/>
        public event CreateInstallationCompletedEventHandler CreateInstallationCompleted;

        /// <remarks/>
        public event EnhancedEnrollmentForOfflineCompletedEventHandler EnhancedEnrollmentForOfflineCompleted;

        /// <remarks/>
        public event CloseInstallationCompletedEventHandler CloseInstallationCompleted;

        /// <remarks/>
        public event ConvertInstallationCompletedEventHandler ConvertInstallationCompleted;

        /// <remarks/>
        public event SwapInstallationCompletedEventHandler SwapInstallationCompleted;

        /// <remarks/>
        public event ImportInstallationUpdateCompletedEventHandler ImportInstallationUpdateCompleted;

        /// <remarks/>
        public event GetInstallationNumberCompletedEventHandler GetInstallationNumberCompleted;

        /// <remarks/>
        public event ImportMeterHistoryCompletedEventHandler ImportMeterHistoryCompleted;

        /// <remarks/>
        public event UpdateBarPositionCentralStatusBySiteIDCompletedEventHandler UpdateBarPositionCentralStatusBySiteIDCompleted;

        /// <remarks/>
        public event UpdateSiteStatsInEnterpriseCompletedEventHandler UpdateSiteStatsInEnterpriseCompleted;

        /// <remarks/>
        public event GetPlannedConversionCompletedEventHandler GetPlannedConversionCompleted;

        /// <remarks/>
        public event PlannedConversionCompletedEventHandler PlannedConversionCompleted;

        /// <remarks/>
        public event GetCurrentServiceCallsCompletedEventHandler GetCurrentServiceCallsCompleted;

        /// <remarks/>
        public event GetOpenServiceCallsCompletedEventHandler GetOpenServiceCallsCompleted;

        /// <remarks/>
        public event GetServiceNotesCompletedEventHandler GetServiceNotesCompleted;

        /// <remarks/>
        public event CloseServiceCallCompletedEventHandler CloseServiceCallCompleted;

        /// <remarks/>
        public event InsertServiceNotesCompletedEventHandler InsertServiceNotesCompleted;

        /// <remarks/>
        public event EscalateServiceCompletedEventHandler EscalateServiceCompleted;

        /// <remarks/>
        public event GetBarPositionStatusCompletedEventHandler GetBarPositionStatusCompleted;

        /// <remarks/>
        public event GetWeeklyCollectionDetailsCompletedEventHandler GetWeeklyCollectionDetailsCompleted;

        /// <remarks/>
        public event GetHqInstallationIDCompletedEventHandler GetHqInstallationIDCompleted;

        /// <remarks/>
        public event GetCashDeskServiceFaultsCompletedEventHandler GetCashDeskServiceFaultsCompleted;

        /// <remarks/>
        public event GetRemediesCompletedEventHandler GetRemediesCompleted;

        /// <remarks/>
        public event UpdateInstallationGameCompletedEventHandler UpdateInstallationGameCompleted;

        /// <remarks/>
        public event GetAssetDetailsCompletedEventHandler GetAssetDetailsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/ImportData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public bool ImportData(string xmlString)
        {
            object[] results = this.Invoke("ImportData", new object[] {
                                                                          xmlString});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportData(string xmlString, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImportData", new object[] {
                                                                   xmlString}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndImportData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void ImportDataAsync(string xmlString)
        {
            this.ImportDataAsync(xmlString, null);
        }

        /// <remarks/>
        public void ImportDataAsync(string xmlString, object userState)
        {
            if ((this.ImportDataOperationCompleted == null))
            {
                this.ImportDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportDataOperationCompleted);
            }
            this.InvokeAsync("ImportData", new object[] {
                                                            xmlString}, this.ImportDataOperationCompleted, userState);
        }

        private void OnImportDataOperationCompleted(object arg)
        {
            if ((this.ImportDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportDataCompleted(this, new ImportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/ImportCompressedData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public bool ImportCompressedData(string compressedData)
        {
            object[] results = this.Invoke("ImportCompressedData", new object[] {
                                                                                    compressedData});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportCompressedData(string compressedData, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImportCompressedData", new object[] {
                                                                             compressedData}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndImportCompressedData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void ImportCompressedDataAsync(string compressedData)
        {
            this.ImportCompressedDataAsync(compressedData, null);
        }

        /// <remarks/>
        public void ImportCompressedDataAsync(string compressedData, object userState)
        {
            if ((this.ImportCompressedDataOperationCompleted == null))
            {
                this.ImportCompressedDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportCompressedDataOperationCompleted);
            }
            this.InvokeAsync("ImportCompressedData", new object[] {
                                                                      compressedData}, this.ImportCompressedDataOperationCompleted, userState);
        }

        private void OnImportCompressedDataOperationCompleted(object arg)
        {
            if ((this.ImportCompressedDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCompressedDataCompleted(this, new ImportCompressedDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/LogSiteEvent", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string LogSiteEvent(string sEventXml)
        {
            object[] results = this.Invoke("LogSiteEvent", new object[] {
                                                                            sEventXml});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginLogSiteEvent(string sEventXml, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("LogSiteEvent", new object[] {
                                                                     sEventXml}, callback, asyncState);
        }

        /// <remarks/>
        public string EndLogSiteEvent(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LogSiteEventAsync(string sEventXml)
        {
            this.LogSiteEventAsync(sEventXml, null);
        }

        /// <remarks/>
        public void LogSiteEventAsync(string sEventXml, object userState)
        {
            if ((this.LogSiteEventOperationCompleted == null))
            {
                this.LogSiteEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogSiteEventOperationCompleted);
            }
            this.InvokeAsync("LogSiteEvent", new object[] {
                                                              sEventXml}, this.LogSiteEventOperationCompleted, userState);
        }

        private void OnLogSiteEventOperationCompleted(object arg)
        {
            if ((this.LogSiteEventCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogSiteEventCompleted(this, new LogSiteEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/HelloWebService", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int HelloWebService(int recieve)
        {
            object[] results = this.Invoke("HelloWebService", new object[] {
                                                                               recieve});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginHelloWebService(int recieve, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("HelloWebService", new object[] {
                                                                        recieve}, callback, asyncState);
        }

        /// <remarks/>
        public int EndHelloWebService(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void HelloWebServiceAsync(int recieve)
        {
            this.HelloWebServiceAsync(recieve, null);
        }

        /// <remarks/>
        public void HelloWebServiceAsync(int recieve, object userState)
        {
            if ((this.HelloWebServiceOperationCompleted == null))
            {
                this.HelloWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWebServiceOperationCompleted);
            }
            this.InvokeAsync("HelloWebService", new object[] {
                                                                 recieve}, this.HelloWebServiceOperationCompleted, userState);
        }

        private void OnHelloWebServiceOperationCompleted(object arg)
        {
            if ((this.HelloWebServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWebServiceCompleted(this, new HelloWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetInstallationData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string GetInstallationData(int siteId)
        {
            object[] results = this.Invoke("GetInstallationData", new object[] {
                                                                                   siteId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetInstallationData(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetInstallationData", new object[] {
                                                                            siteId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetInstallationData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInstallationDataAsync(int siteId)
        {
            this.GetInstallationDataAsync(siteId, null);
        }

        /// <remarks/>
        public void GetInstallationDataAsync(int siteId, object userState)
        {
            if ((this.GetInstallationDataOperationCompleted == null))
            {
                this.GetInstallationDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstallationDataOperationCompleted);
            }
            this.InvokeAsync("GetInstallationData", new object[] {
                                                                     siteId}, this.GetInstallationDataOperationCompleted, userState);
        }

        private void OnGetInstallationDataOperationCompleted(object arg)
        {
            if ((this.GetInstallationDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstallationDataCompleted(this, new GetInstallationDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/ImportHourlyStatisticsData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string ImportHourlyStatisticsData(string xmlString)
        {
            object[] results = this.Invoke("ImportHourlyStatisticsData", new object[] {
                                                                                          xmlString});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportHourlyStatisticsData(string xmlString, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImportHourlyStatisticsData", new object[] {
                                                                                   xmlString}, callback, asyncState);
        }

        /// <remarks/>
        public string EndImportHourlyStatisticsData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ImportHourlyStatisticsDataAsync(string xmlString)
        {
            this.ImportHourlyStatisticsDataAsync(xmlString, null);
        }

        /// <remarks/>
        public void ImportHourlyStatisticsDataAsync(string xmlString, object userState)
        {
            if ((this.ImportHourlyStatisticsDataOperationCompleted == null))
            {
                this.ImportHourlyStatisticsDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportHourlyStatisticsDataOperationCompleted);
            }
            this.InvokeAsync("ImportHourlyStatisticsData", new object[] {
                                                                            xmlString}, this.ImportHourlyStatisticsDataOperationCompleted, userState);
        }

        private void OnImportHourlyStatisticsDataOperationCompleted(object arg)
        {
            if ((this.ImportHourlyStatisticsDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportHourlyStatisticsDataCompleted(this, new ImportHourlyStatisticsDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/InsertTreasuryEntries", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int InsertTreasuryEntries(string strXml)
        {
            object[] results = this.Invoke("InsertTreasuryEntries", new object[] {
                                                                                     strXml});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertTreasuryEntries(string strXml, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertTreasuryEntries", new object[] {
                                                                              strXml}, callback, asyncState);
        }

        /// <remarks/>
        public int EndInsertTreasuryEntries(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void InsertTreasuryEntriesAsync(string strXml)
        {
            this.InsertTreasuryEntriesAsync(strXml, null);
        }

        /// <remarks/>
        public void InsertTreasuryEntriesAsync(string strXml, object userState)
        {
            if ((this.InsertTreasuryEntriesOperationCompleted == null))
            {
                this.InsertTreasuryEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertTreasuryEntriesOperationCompleted);
            }
            this.InvokeAsync("InsertTreasuryEntries", new object[] {
                                                                       strXml}, this.InsertTreasuryEntriesOperationCompleted, userState);
        }

        private void OnInsertTreasuryEntriesOperationCompleted(object arg)
        {
            if ((this.InsertTreasuryEntriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertTreasuryEntriesCompleted(this, new InsertTreasuryEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetZonesData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string GetZonesData(int siteId)
        {
            object[] results = this.Invoke("GetZonesData", new object[] {
                                                                            siteId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetZonesData(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetZonesData", new object[] {
                                                                     siteId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetZonesData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetZonesDataAsync(int siteId)
        {
            this.GetZonesDataAsync(siteId, null);
        }

        /// <remarks/>
        public void GetZonesDataAsync(int siteId, object userState)
        {
            if ((this.GetZonesDataOperationCompleted == null))
            {
                this.GetZonesDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetZonesDataOperationCompleted);
            }
            this.InvokeAsync("GetZonesData", new object[] {
                                                              siteId}, this.GetZonesDataOperationCompleted, userState);
        }

        private void OnGetZonesDataOperationCompleted(object arg)
        {
            if ((this.GetZonesDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetZonesDataCompleted(this, new GetZonesDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetBarPositionsData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string GetBarPositionsData(int siteId)
        {
            object[] results = this.Invoke("GetBarPositionsData", new object[] {
                                                                                   siteId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBarPositionsData(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBarPositionsData", new object[] {
                                                                            siteId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBarPositionsData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBarPositionsDataAsync(int siteId)
        {
            this.GetBarPositionsDataAsync(siteId, null);
        }

        /// <remarks/>
        public void GetBarPositionsDataAsync(int siteId, object userState)
        {
            if ((this.GetBarPositionsDataOperationCompleted == null))
            {
                this.GetBarPositionsDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBarPositionsDataOperationCompleted);
            }
            this.InvokeAsync("GetBarPositionsData", new object[] {
                                                                     siteId}, this.GetBarPositionsDataOperationCompleted, userState);
        }

        private void OnGetBarPositionsDataOperationCompleted(object arg)
        {
            if ((this.GetBarPositionsDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBarPositionsDataCompleted(this, new GetBarPositionsDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetMachineData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string GetMachineData(int siteId)
        {
            object[] results = this.Invoke("GetMachineData", new object[] {
                                                                              siteId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMachineData(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetMachineData", new object[] {
                                                                       siteId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetMachineData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetMachineDataAsync(int siteId)
        {
            this.GetMachineDataAsync(siteId, null);
        }

        /// <remarks/>
        public void GetMachineDataAsync(int siteId, object userState)
        {
            if ((this.GetMachineDataOperationCompleted == null))
            {
                this.GetMachineDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMachineDataOperationCompleted);
            }
            this.InvokeAsync("GetMachineData", new object[] {
                                                                siteId}, this.GetMachineDataOperationCompleted, userState);
        }

        private void OnGetMachineDataOperationCompleted(object arg)
        {
            if ((this.GetMachineDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMachineDataCompleted(this, new GetMachineDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetLatestMeterHistory", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetLatestMeterHistory(int installationID)
        {
            object[] results = this.Invoke("GetLatestMeterHistory", new object[] {
                                                                                     installationID});
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLatestMeterHistory(int installationID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLatestMeterHistory", new object[] {
                                                                              installationID}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetLatestMeterHistory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetLatestMeterHistoryAsync(int installationID)
        {
            this.GetLatestMeterHistoryAsync(installationID, null);
        }

        /// <remarks/>
        public void GetLatestMeterHistoryAsync(int installationID, object userState)
        {
            if ((this.GetLatestMeterHistoryOperationCompleted == null))
            {
                this.GetLatestMeterHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestMeterHistoryOperationCompleted);
            }
            this.InvokeAsync("GetLatestMeterHistory", new object[] {
                                                                       installationID}, this.GetLatestMeterHistoryOperationCompleted, userState);
        }

        private void OnGetLatestMeterHistoryOperationCompleted(object arg)
        {
            if ((this.GetLatestMeterHistoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestMeterHistoryCompleted(this, new GetLatestMeterHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetLatestSiteBatchID", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetLatestSiteBatchID(int siteCode)
        {
            object[] results = this.Invoke("GetLatestSiteBatchID", new object[] {
                                                                                    siteCode});
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLatestSiteBatchID(int siteCode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLatestSiteBatchID", new object[] {
                                                                             siteCode}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetLatestSiteBatchID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetLatestSiteBatchIDAsync(int siteCode)
        {
            this.GetLatestSiteBatchIDAsync(siteCode, null);
        }

        /// <remarks/>
        public void GetLatestSiteBatchIDAsync(int siteCode, object userState)
        {
            if ((this.GetLatestSiteBatchIDOperationCompleted == null))
            {
                this.GetLatestSiteBatchIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestSiteBatchIDOperationCompleted);
            }
            this.InvokeAsync("GetLatestSiteBatchID", new object[] {
                                                                      siteCode}, this.GetLatestSiteBatchIDOperationCompleted, userState);
        }

        private void OnGetLatestSiteBatchIDOperationCompleted(object arg)
        {
            if ((this.GetLatestSiteBatchIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestSiteBatchIDCompleted(this, new GetLatestSiteBatchIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/InsertRead", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public bool InsertRead(string xmlString)
        {
            object[] results = this.Invoke("InsertRead", new object[] {
                                                                          xmlString});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertRead(string xmlString, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertRead", new object[] {
                                                                   xmlString}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndInsertRead(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void InsertReadAsync(string xmlString)
        {
            this.InsertReadAsync(xmlString, null);
        }

        /// <remarks/>
        public void InsertReadAsync(string xmlString, object userState)
        {
            if ((this.InsertReadOperationCompleted == null))
            {
                this.InsertReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertReadOperationCompleted);
            }
            this.InvokeAsync("InsertRead", new object[] {
                                                            xmlString}, this.InsertReadOperationCompleted, userState);
        }

        private void OnInsertReadOperationCompleted(object arg)
        {
            if ((this.InsertReadCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertReadCompleted(this, new InsertReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/CreateInstallation", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int CreateInstallation(string installationData)
        {
            object[] results = this.Invoke("CreateInstallation", new object[] {
                                                                                  installationData});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateInstallation(string installationData, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateInstallation", new object[] {
                                                                           installationData}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCreateInstallation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CreateInstallationAsync(string installationData)
        {
            this.CreateInstallationAsync(installationData, null);
        }

        /// <remarks/>
        public void CreateInstallationAsync(string installationData, object userState)
        {
            if ((this.CreateInstallationOperationCompleted == null))
            {
                this.CreateInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateInstallationOperationCompleted);
            }
            this.InvokeAsync("CreateInstallation", new object[] {
                                                                    installationData}, this.CreateInstallationOperationCompleted, userState);
        }

        private void OnCreateInstallationOperationCompleted(object arg)
        {
            if ((this.CreateInstallationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateInstallationCompleted(this, new CreateInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/EnhancedEnrollmentForOffline", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int EnhancedEnrollmentForOffline(string strXML, InstallationType installType)
        {
            object[] results = this.Invoke("EnhancedEnrollmentForOffline", new object[] {
                                                                                            strXML,
                                                                                            installType});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginEnhancedEnrollmentForOffline(string strXML, InstallationType installType, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("EnhancedEnrollmentForOffline", new object[] {
                                                                                     strXML,
                                                                                     installType}, callback, asyncState);
        }

        /// <remarks/>
        public int EndEnhancedEnrollmentForOffline(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void EnhancedEnrollmentForOfflineAsync(string strXML, InstallationType installType)
        {
            this.EnhancedEnrollmentForOfflineAsync(strXML, installType, null);
        }

        /// <remarks/>
        public void EnhancedEnrollmentForOfflineAsync(string strXML, InstallationType installType, object userState)
        {
            if ((this.EnhancedEnrollmentForOfflineOperationCompleted == null))
            {
                this.EnhancedEnrollmentForOfflineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnhancedEnrollmentForOfflineOperationCompleted);
            }
            this.InvokeAsync("EnhancedEnrollmentForOffline", new object[] {
                                                                              strXML,
                                                                              installType}, this.EnhancedEnrollmentForOfflineOperationCompleted, userState);
        }

        private void OnEnhancedEnrollmentForOfflineOperationCompleted(object arg)
        {
            if ((this.EnhancedEnrollmentForOfflineCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnhancedEnrollmentForOfflineCompleted(this, new EnhancedEnrollmentForOfflineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/CloseInstallation", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int CloseInstallation(string InstallationXML)
        {
            object[] results = this.Invoke("CloseInstallation", new object[] {
                                                                                 InstallationXML});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCloseInstallation(string InstallationXML, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CloseInstallation", new object[] {
                                                                          InstallationXML}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCloseInstallation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CloseInstallationAsync(string InstallationXML)
        {
            this.CloseInstallationAsync(InstallationXML, null);
        }

        /// <remarks/>
        public void CloseInstallationAsync(string InstallationXML, object userState)
        {
            if ((this.CloseInstallationOperationCompleted == null))
            {
                this.CloseInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseInstallationOperationCompleted);
            }
            this.InvokeAsync("CloseInstallation", new object[] {
                                                                   InstallationXML}, this.CloseInstallationOperationCompleted, userState);
        }

        private void OnCloseInstallationOperationCompleted(object arg)
        {
            if ((this.CloseInstallationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseInstallationCompleted(this, new CloseInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/ConvertInstallation", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int ConvertInstallation(string OldInstallationXML, string NewInstallationXML)
        {
            object[] results = this.Invoke("ConvertInstallation", new object[] {
                                                                                   OldInstallationXML,
                                                                                   NewInstallationXML});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginConvertInstallation(string OldInstallationXML, string NewInstallationXML, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ConvertInstallation", new object[] {
                                                                            OldInstallationXML,
                                                                            NewInstallationXML}, callback, asyncState);
        }

        /// <remarks/>
        public int EndConvertInstallation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void ConvertInstallationAsync(string OldInstallationXML, string NewInstallationXML)
        {
            this.ConvertInstallationAsync(OldInstallationXML, NewInstallationXML, null);
        }

        /// <remarks/>
        public void ConvertInstallationAsync(string OldInstallationXML, string NewInstallationXML, object userState)
        {
            if ((this.ConvertInstallationOperationCompleted == null))
            {
                this.ConvertInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertInstallationOperationCompleted);
            }
            this.InvokeAsync("ConvertInstallation", new object[] {
                                                                     OldInstallationXML,
                                                                     NewInstallationXML}, this.ConvertInstallationOperationCompleted, userState);
        }

        private void OnConvertInstallationOperationCompleted(object arg)
        {
            if ((this.ConvertInstallationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertInstallationCompleted(this, new ConvertInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/SwapInstallation", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int SwapInstallation(string InstallationXML)
        {
            object[] results = this.Invoke("SwapInstallation", new object[] {
                                                                                InstallationXML});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSwapInstallation(string InstallationXML, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SwapInstallation", new object[] {
                                                                         InstallationXML}, callback, asyncState);
        }

        /// <remarks/>
        public int EndSwapInstallation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void SwapInstallationAsync(string InstallationXML)
        {
            this.SwapInstallationAsync(InstallationXML, null);
        }

        /// <remarks/>
        public void SwapInstallationAsync(string InstallationXML, object userState)
        {
            if ((this.SwapInstallationOperationCompleted == null))
            {
                this.SwapInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwapInstallationOperationCompleted);
            }
            this.InvokeAsync("SwapInstallation", new object[] {
                                                                  InstallationXML}, this.SwapInstallationOperationCompleted, userState);
        }

        private void OnSwapInstallationOperationCompleted(object arg)
        {
            if ((this.SwapInstallationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwapInstallationCompleted(this, new SwapInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/ImportInstallationUpdate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public bool ImportInstallationUpdate(string installationXML)
        {
            object[] results = this.Invoke("ImportInstallationUpdate", new object[] {
                                                                                        installationXML});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportInstallationUpdate(string installationXML, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImportInstallationUpdate", new object[] {
                                                                                 installationXML}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndImportInstallationUpdate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void ImportInstallationUpdateAsync(string installationXML)
        {
            this.ImportInstallationUpdateAsync(installationXML, null);
        }

        /// <remarks/>
        public void ImportInstallationUpdateAsync(string installationXML, object userState)
        {
            if ((this.ImportInstallationUpdateOperationCompleted == null))
            {
                this.ImportInstallationUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportInstallationUpdateOperationCompleted);
            }
            this.InvokeAsync("ImportInstallationUpdate", new object[] {
                                                                          installationXML}, this.ImportInstallationUpdateOperationCompleted, userState);
        }

        private void OnImportInstallationUpdateOperationCompleted(object arg)
        {
            if ((this.ImportInstallationUpdateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportInstallationUpdateCompleted(this, new ImportInstallationUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetInstallationNumber", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string GetInstallationNumber(string xmlString)
        {
            object[] results = this.Invoke("GetInstallationNumber", new object[] {
                                                                                     xmlString});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetInstallationNumber(string xmlString, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetInstallationNumber", new object[] {
                                                                              xmlString}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetInstallationNumber(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInstallationNumberAsync(string xmlString)
        {
            this.GetInstallationNumberAsync(xmlString, null);
        }

        /// <remarks/>
        public void GetInstallationNumberAsync(string xmlString, object userState)
        {
            if ((this.GetInstallationNumberOperationCompleted == null))
            {
                this.GetInstallationNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstallationNumberOperationCompleted);
            }
            this.InvokeAsync("GetInstallationNumber", new object[] {
                                                                       xmlString}, this.GetInstallationNumberOperationCompleted, userState);
        }

        private void OnGetInstallationNumberOperationCompleted(object arg)
        {
            if ((this.GetInstallationNumberCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstallationNumberCompleted(this, new GetInstallationNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/ImportMeterHistory", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public bool ImportMeterHistory(string xmlString)
        {
            object[] results = this.Invoke("ImportMeterHistory", new object[] {
                                                                                  xmlString});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportMeterHistory(string xmlString, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImportMeterHistory", new object[] {
                                                                           xmlString}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndImportMeterHistory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void ImportMeterHistoryAsync(string xmlString)
        {
            this.ImportMeterHistoryAsync(xmlString, null);
        }

        /// <remarks/>
        public void ImportMeterHistoryAsync(string xmlString, object userState)
        {
            if ((this.ImportMeterHistoryOperationCompleted == null))
            {
                this.ImportMeterHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportMeterHistoryOperationCompleted);
            }
            this.InvokeAsync("ImportMeterHistory", new object[] {
                                                                    xmlString}, this.ImportMeterHistoryOperationCompleted, userState);
        }

        private void OnImportMeterHistoryOperationCompleted(object arg)
        {
            if ((this.ImportMeterHistoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportMeterHistoryCompleted(this, new ImportMeterHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/UpdateBarPositionCentralStatusBySiteID", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public bool UpdateBarPositionCentralStatusBySiteID(int exportHistoryID)
        {
            object[] results = this.Invoke("UpdateBarPositionCentralStatusBySiteID", new object[] {
                                                                                                      exportHistoryID});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateBarPositionCentralStatusBySiteID(int exportHistoryID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateBarPositionCentralStatusBySiteID", new object[] {
                                                                                               exportHistoryID}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndUpdateBarPositionCentralStatusBySiteID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void UpdateBarPositionCentralStatusBySiteIDAsync(int exportHistoryID)
        {
            this.UpdateBarPositionCentralStatusBySiteIDAsync(exportHistoryID, null);
        }

        /// <remarks/>
        public void UpdateBarPositionCentralStatusBySiteIDAsync(int exportHistoryID, object userState)
        {
            if ((this.UpdateBarPositionCentralStatusBySiteIDOperationCompleted == null))
            {
                this.UpdateBarPositionCentralStatusBySiteIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBarPositionCentralStatusBySiteIDOperationCompleted);
            }
            this.InvokeAsync("UpdateBarPositionCentralStatusBySiteID", new object[] {
                                                                                        exportHistoryID}, this.UpdateBarPositionCentralStatusBySiteIDOperationCompleted, userState);
        }

        private void OnUpdateBarPositionCentralStatusBySiteIDOperationCompleted(object arg)
        {
            if ((this.UpdateBarPositionCentralStatusBySiteIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBarPositionCentralStatusBySiteIDCompleted(this, new UpdateBarPositionCentralStatusBySiteIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/UpdateSiteStatsInEnterprise", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public bool UpdateSiteStatsInEnterprise(string strSiteName, string strStatusXML)
        {
            object[] results = this.Invoke("UpdateSiteStatsInEnterprise", new object[] {
                                                                                           strSiteName,
                                                                                           strStatusXML});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSiteStatsInEnterprise(string strSiteName, string strStatusXML, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSiteStatsInEnterprise", new object[] {
                                                                                    strSiteName,
                                                                                    strStatusXML}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndUpdateSiteStatsInEnterprise(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void UpdateSiteStatsInEnterpriseAsync(string strSiteName, string strStatusXML)
        {
            this.UpdateSiteStatsInEnterpriseAsync(strSiteName, strStatusXML, null);
        }

        /// <remarks/>
        public void UpdateSiteStatsInEnterpriseAsync(string strSiteName, string strStatusXML, object userState)
        {
            if ((this.UpdateSiteStatsInEnterpriseOperationCompleted == null))
            {
                this.UpdateSiteStatsInEnterpriseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSiteStatsInEnterpriseOperationCompleted);
            }
            this.InvokeAsync("UpdateSiteStatsInEnterprise", new object[] {
                                                                             strSiteName,
                                                                             strStatusXML}, this.UpdateSiteStatsInEnterpriseOperationCompleted, userState);
        }

        private void OnUpdateSiteStatsInEnterpriseOperationCompleted(object arg)
        {
            if ((this.UpdateSiteStatsInEnterpriseCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSiteStatsInEnterpriseCompleted(this, new UpdateSiteStatsInEnterpriseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetPlannedConversion", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string GetPlannedConversion(string assetNumber)
        {
            object[] results = this.Invoke("GetPlannedConversion", new object[] {
                                                                                    assetNumber});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPlannedConversion(string assetNumber, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPlannedConversion", new object[] {
                                                                             assetNumber}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetPlannedConversion(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPlannedConversionAsync(string assetNumber)
        {
            this.GetPlannedConversionAsync(assetNumber, null);
        }

        /// <remarks/>
        public void GetPlannedConversionAsync(string assetNumber, object userState)
        {
            if ((this.GetPlannedConversionOperationCompleted == null))
            {
                this.GetPlannedConversionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlannedConversionOperationCompleted);
            }
            this.InvokeAsync("GetPlannedConversion", new object[] {
                                                                      assetNumber}, this.GetPlannedConversionOperationCompleted, userState);
        }

        private void OnGetPlannedConversionOperationCompleted(object arg)
        {
            if ((this.GetPlannedConversionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlannedConversionCompleted(this, new GetPlannedConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/PlannedConversion", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int PlannedConversion(string installationXML)
        {
            object[] results = this.Invoke("PlannedConversion", new object[] {
                                                                                 installationXML});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginPlannedConversion(string installationXML, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("PlannedConversion", new object[] {
                                                                          installationXML}, callback, asyncState);
        }

        /// <remarks/>
        public int EndPlannedConversion(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void PlannedConversionAsync(string installationXML)
        {
            this.PlannedConversionAsync(installationXML, null);
        }

        /// <remarks/>
        public void PlannedConversionAsync(string installationXML, object userState)
        {
            if ((this.PlannedConversionOperationCompleted == null))
            {
                this.PlannedConversionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlannedConversionOperationCompleted);
            }
            this.InvokeAsync("PlannedConversion", new object[] {
                                                                   installationXML}, this.PlannedConversionOperationCompleted, userState);
        }

        private void OnPlannedConversionOperationCompleted(object arg)
        {
            if ((this.PlannedConversionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PlannedConversionCompleted(this, new PlannedConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetCurrentServiceCalls", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string GetCurrentServiceCalls(string strSiteCode, string strStartBarPosNo, string strLastBarPosNo)
        {
            object[] results = this.Invoke("GetCurrentServiceCalls", new object[] {
                                                                                      strSiteCode,
                                                                                      strStartBarPosNo,
                                                                                      strLastBarPosNo});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCurrentServiceCalls(string strSiteCode, string strStartBarPosNo, string strLastBarPosNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCurrentServiceCalls", new object[] {
                                                                               strSiteCode,
                                                                               strStartBarPosNo,
                                                                               strLastBarPosNo}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCurrentServiceCalls(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCurrentServiceCallsAsync(string strSiteCode, string strStartBarPosNo, string strLastBarPosNo)
        {
            this.GetCurrentServiceCallsAsync(strSiteCode, strStartBarPosNo, strLastBarPosNo, null);
        }

        /// <remarks/>
        public void GetCurrentServiceCallsAsync(string strSiteCode, string strStartBarPosNo, string strLastBarPosNo, object userState)
        {
            if ((this.GetCurrentServiceCallsOperationCompleted == null))
            {
                this.GetCurrentServiceCallsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentServiceCallsOperationCompleted);
            }
            this.InvokeAsync("GetCurrentServiceCalls", new object[] {
                                                                        strSiteCode,
                                                                        strStartBarPosNo,
                                                                        strLastBarPosNo}, this.GetCurrentServiceCallsOperationCompleted, userState);
        }

        private void OnGetCurrentServiceCallsOperationCompleted(object arg)
        {
            if ((this.GetCurrentServiceCallsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentServiceCallsCompleted(this, new GetCurrentServiceCallsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetOpenServiceCalls", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetOpenServiceCalls(string siteCode, string barPos)
        {
            object[] results = this.Invoke("GetOpenServiceCalls", new object[] {
                                                                                   siteCode,
                                                                                   barPos});
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetOpenServiceCalls(string siteCode, string barPos, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetOpenServiceCalls", new object[] {
                                                                            siteCode,
                                                                            barPos}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetOpenServiceCalls(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetOpenServiceCallsAsync(string siteCode, string barPos)
        {
            this.GetOpenServiceCallsAsync(siteCode, barPos, null);
        }

        /// <remarks/>
        public void GetOpenServiceCallsAsync(string siteCode, string barPos, object userState)
        {
            if ((this.GetOpenServiceCallsOperationCompleted == null))
            {
                this.GetOpenServiceCallsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOpenServiceCallsOperationCompleted);
            }
            this.InvokeAsync("GetOpenServiceCalls", new object[] {
                                                                     siteCode,
                                                                     barPos}, this.GetOpenServiceCallsOperationCompleted, userState);
        }

        private void OnGetOpenServiceCallsOperationCompleted(object arg)
        {
            if ((this.GetOpenServiceCallsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOpenServiceCallsCompleted(this, new GetOpenServiceCallsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetServiceNotes", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetServiceNotes(string jobID)
        {
            object[] results = this.Invoke("GetServiceNotes", new object[] {
                                                                               jobID});
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetServiceNotes(string jobID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetServiceNotes", new object[] {
                                                                        jobID}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetServiceNotes(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetServiceNotesAsync(string jobID)
        {
            this.GetServiceNotesAsync(jobID, null);
        }

        /// <remarks/>
        public void GetServiceNotesAsync(string jobID, object userState)
        {
            if ((this.GetServiceNotesOperationCompleted == null))
            {
                this.GetServiceNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceNotesOperationCompleted);
            }
            this.InvokeAsync("GetServiceNotes", new object[] {
                                                                 jobID}, this.GetServiceNotesOperationCompleted, userState);
        }

        private void OnGetServiceNotesOperationCompleted(object arg)
        {
            if ((this.GetServiceNotesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceNotesCompleted(this, new GetServiceNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/CloseServiceCall", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int CloseServiceCall(int serviceID, string jobID, int remedy, int userId, string notes)
        {
            object[] results = this.Invoke("CloseServiceCall", new object[] {
                                                                                serviceID,
                                                                                jobID,
                                                                                remedy,
                                                                                userId,
                                                                                notes});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCloseServiceCall(int serviceID, string jobID, int remedy, int userId, string notes, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CloseServiceCall", new object[] {
                                                                         serviceID,
                                                                         jobID,
                                                                         remedy,
                                                                         userId,
                                                                         notes}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCloseServiceCall(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CloseServiceCallAsync(int serviceID, string jobID, int remedy, int userId, string notes)
        {
            this.CloseServiceCallAsync(serviceID, jobID, remedy, userId, notes, null);
        }

        /// <remarks/>
        public void CloseServiceCallAsync(int serviceID, string jobID, int remedy, int userId, string notes, object userState)
        {
            if ((this.CloseServiceCallOperationCompleted == null))
            {
                this.CloseServiceCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseServiceCallOperationCompleted);
            }
            this.InvokeAsync("CloseServiceCall", new object[] {
                                                                  serviceID,
                                                                  jobID,
                                                                  remedy,
                                                                  userId,
                                                                  notes}, this.CloseServiceCallOperationCompleted, userState);
        }

        private void OnCloseServiceCallOperationCompleted(object arg)
        {
            if ((this.CloseServiceCallCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseServiceCallCompleted(this, new CloseServiceCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/InsertServiceNotes", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int InsertServiceNotes(string jobID, string notes, string userName)
        {
            object[] results = this.Invoke("InsertServiceNotes", new object[] {
                                                                                  jobID,
                                                                                  notes,
                                                                                  userName});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInsertServiceNotes(string jobID, string notes, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InsertServiceNotes", new object[] {
                                                                           jobID,
                                                                           notes,
                                                                           userName}, callback, asyncState);
        }

        /// <remarks/>
        public int EndInsertServiceNotes(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void InsertServiceNotesAsync(string jobID, string notes, string userName)
        {
            this.InsertServiceNotesAsync(jobID, notes, userName, null);
        }

        /// <remarks/>
        public void InsertServiceNotesAsync(string jobID, string notes, string userName, object userState)
        {
            if ((this.InsertServiceNotesOperationCompleted == null))
            {
                this.InsertServiceNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertServiceNotesOperationCompleted);
            }
            this.InvokeAsync("InsertServiceNotes", new object[] {
                                                                    jobID,
                                                                    notes,
                                                                    userName}, this.InsertServiceNotesOperationCompleted, userState);
        }

        private void OnInsertServiceNotesOperationCompleted(object arg)
        {
            if ((this.InsertServiceNotesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertServiceNotesCompleted(this, new InsertServiceNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/EscalateService", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public int EscalateService(string jobID)
        {
            object[] results = this.Invoke("EscalateService", new object[] {
                                                                               jobID});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginEscalateService(string jobID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("EscalateService", new object[] {
                                                                        jobID}, callback, asyncState);
        }

        /// <remarks/>
        public int EndEscalateService(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void EscalateServiceAsync(string jobID)
        {
            this.EscalateServiceAsync(jobID, null);
        }

        /// <remarks/>
        public void EscalateServiceAsync(string jobID, object userState)
        {
            if ((this.EscalateServiceOperationCompleted == null))
            {
                this.EscalateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEscalateServiceOperationCompleted);
            }
            this.InvokeAsync("EscalateService", new object[] {
                                                                 jobID}, this.EscalateServiceOperationCompleted, userState);
        }

        private void OnEscalateServiceOperationCompleted(object arg)
        {
            if ((this.EscalateServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EscalateServiceCompleted(this, new EscalateServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetBarPositionStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetBarPositionStatus(string siteCode)
        {
            object[] results = this.Invoke("GetBarPositionStatus", new object[] {
                                                                                    siteCode});
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBarPositionStatus(string siteCode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBarPositionStatus", new object[] {
                                                                             siteCode}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetBarPositionStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetBarPositionStatusAsync(string siteCode)
        {
            this.GetBarPositionStatusAsync(siteCode, null);
        }

        /// <remarks/>
        public void GetBarPositionStatusAsync(string siteCode, object userState)
        {
            if ((this.GetBarPositionStatusOperationCompleted == null))
            {
                this.GetBarPositionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBarPositionStatusOperationCompleted);
            }
            this.InvokeAsync("GetBarPositionStatus", new object[] {
                                                                      siteCode}, this.GetBarPositionStatusOperationCompleted, userState);
        }

        private void OnGetBarPositionStatusOperationCompleted(object arg)
        {
            if ((this.GetBarPositionStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBarPositionStatusCompleted(this, new GetBarPositionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetWeeklyCollectionDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetWeeklyCollectionDetails(string strSiteCode, int iWeekID, int iNoOfRecords)
        {
            object[] results = this.Invoke("GetWeeklyCollectionDetails", new object[] {
                                                                                          strSiteCode,
                                                                                          iWeekID,
                                                                                          iNoOfRecords});
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetWeeklyCollectionDetails(string strSiteCode, int iWeekID, int iNoOfRecords, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetWeeklyCollectionDetails", new object[] {
                                                                                   strSiteCode,
                                                                                   iWeekID,
                                                                                   iNoOfRecords}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetWeeklyCollectionDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetWeeklyCollectionDetailsAsync(string strSiteCode, int iWeekID, int iNoOfRecords)
        {
            this.GetWeeklyCollectionDetailsAsync(strSiteCode, iWeekID, iNoOfRecords, null);
        }

        /// <remarks/>
        public void GetWeeklyCollectionDetailsAsync(string strSiteCode, int iWeekID, int iNoOfRecords, object userState)
        {
            if ((this.GetWeeklyCollectionDetailsOperationCompleted == null))
            {
                this.GetWeeklyCollectionDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWeeklyCollectionDetailsOperationCompleted);
            }
            this.InvokeAsync("GetWeeklyCollectionDetails", new object[] {
                                                                            strSiteCode,
                                                                            iWeekID,
                                                                            iNoOfRecords}, this.GetWeeklyCollectionDetailsOperationCompleted, userState);
        }

        private void OnGetWeeklyCollectionDetailsOperationCompleted(object arg)
        {
            if ((this.GetWeeklyCollectionDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWeeklyCollectionDetailsCompleted(this, new GetWeeklyCollectionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetHqInstallationID", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string GetHqInstallationID()
        {
            object[] results = this.Invoke("GetHqInstallationID", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHqInstallationID(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHqInstallationID", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndGetHqInstallationID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetHqInstallationIDAsync()
        {
            this.GetHqInstallationIDAsync(null);
        }

        /// <remarks/>
        public void GetHqInstallationIDAsync(object userState)
        {
            if ((this.GetHqInstallationIDOperationCompleted == null))
            {
                this.GetHqInstallationIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHqInstallationIDOperationCompleted);
            }
            this.InvokeAsync("GetHqInstallationID", new object[0], this.GetHqInstallationIDOperationCompleted, userState);
        }

        private void OnGetHqInstallationIDOperationCompleted(object arg)
        {
            if ((this.GetHqInstallationIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHqInstallationIDCompleted(this, new GetHqInstallationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetCashDeskServiceFaults", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetCashDeskServiceFaults()
        {
            object[] results = this.Invoke("GetCashDeskServiceFaults", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCashDeskServiceFaults(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCashDeskServiceFaults", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetCashDeskServiceFaults(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetCashDeskServiceFaultsAsync()
        {
            this.GetCashDeskServiceFaultsAsync(null);
        }

        /// <remarks/>
        public void GetCashDeskServiceFaultsAsync(object userState)
        {
            if ((this.GetCashDeskServiceFaultsOperationCompleted == null))
            {
                this.GetCashDeskServiceFaultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashDeskServiceFaultsOperationCompleted);
            }
            this.InvokeAsync("GetCashDeskServiceFaults", new object[0], this.GetCashDeskServiceFaultsOperationCompleted, userState);
        }

        private void OnGetCashDeskServiceFaultsOperationCompleted(object arg)
        {
            if ((this.GetCashDeskServiceFaultsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashDeskServiceFaultsCompleted(this, new GetCashDeskServiceFaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetRemedies", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetRemedies()
        {
            object[] results = this.Invoke("GetRemedies", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetRemedies(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRemedies", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetRemedies(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetRemediesAsync()
        {
            this.GetRemediesAsync(null);
        }

        /// <remarks/>
        public void GetRemediesAsync(object userState)
        {
            if ((this.GetRemediesOperationCompleted == null))
            {
                this.GetRemediesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemediesOperationCompleted);
            }
            this.InvokeAsync("GetRemedies", new object[0], this.GetRemediesOperationCompleted, userState);
        }

        private void OnGetRemediesOperationCompleted(object arg)
        {
            if ((this.GetRemediesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemediesCompleted(this, new GetRemediesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/UpdateInstallationGame", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public string UpdateInstallationGame(string strInstallationXML)
        {
            object[] results = this.Invoke("UpdateInstallationGame", new object[] {
                                                                                      strInstallationXML});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateInstallationGame(string strInstallationXML, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateInstallationGame", new object[] {
                                                                               strInstallationXML}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateInstallationGame(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateInstallationGameAsync(string strInstallationXML)
        {
            this.UpdateInstallationGameAsync(strInstallationXML, null);
        }

        /// <remarks/>
        public void UpdateInstallationGameAsync(string strInstallationXML, object userState)
        {
            if ((this.UpdateInstallationGameOperationCompleted == null))
            {
                this.UpdateInstallationGameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInstallationGameOperationCompleted);
            }
            this.InvokeAsync("UpdateInstallationGame", new object[] {
                                                                        strInstallationXML}, this.UpdateInstallationGameOperationCompleted, userState);
        }

        private void OnUpdateInstallationGameOperationCompleted(object arg)
        {
            if ((this.UpdateInstallationGameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInstallationGameCompleted(this, new UpdateInstallationGameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("AuthenticationInformationValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://tempuri.org/GetAssetDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [SoapSecurityExtension(Decrypt = DecryptMode.Request)]
        public System.Data.DataTable GetAssetDetails(string assetNo)
        {
            object[] results = this.Invoke("GetAssetDetails", new object[] {
                                                                               assetNo});
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAssetDetails(string assetNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAssetDetails", new object[] {
                                                                        assetNo}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndGetAssetDetails(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable)(results[0]));
        }

        /// <remarks/>
        public void GetAssetDetailsAsync(string assetNo)
        {
            this.GetAssetDetailsAsync(assetNo, null);
        }

        /// <remarks/>
        public void GetAssetDetailsAsync(string assetNo, object userState)
        {
            if ((this.GetAssetDetailsOperationCompleted == null))
            {
                this.GetAssetDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssetDetailsOperationCompleted);
            }
            this.InvokeAsync("GetAssetDetails", new object[] {
                                                                 assetNo}, this.GetAssetDetailsOperationCompleted, userState);
        }

        private void OnGetAssetDetailsOperationCompleted(object arg)
        {
            if ((this.GetAssetDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssetDetailsCompleted(this, new GetAssetDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://tempuri.org/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://tempuri.org/", IsNullable = false)]
    public partial class AuthenticationInformation : System.Web.Services.Protocols.SoapHeader
    {

        private string enterprisePassKeyField;

        private string exchangePassKeyField;

        private string siteCodeField;

        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        public string EnterprisePassKey
        {
            get
            {
                return this.enterprisePassKeyField;
            }
            set
            {
                this.enterprisePassKeyField = value;
            }
        }

        /// <remarks/>
        public string ExchangePassKey
        {
            get
            {
                return this.exchangePassKeyField;
            }
            set
            {
                this.exchangePassKeyField = value;
            }
        }

        /// <remarks/>
        public string SiteCode
        {
            get
            {
                return this.siteCodeField;
            }
            set
            {
                this.siteCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://tempuri.org/")]
    public enum InstallationType
    {

        /// <remarks/>
        NewInstallation,

        /// <remarks/>
        GmuChange,

        /// <remarks/>
        ConvertInstallation,

        /// <remarks/>
        RemoveInstallation,

        /// <remarks/>
        PlannedConversion,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void ImportDataCompletedEventHandler(object sender, ImportDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ImportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void ImportCompressedDataCompletedEventHandler(object sender, ImportCompressedDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ImportCompressedDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportCompressedDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void LogSiteEventCompletedEventHandler(object sender, LogSiteEventCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class LogSiteEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LogSiteEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void HelloWebServiceCompletedEventHandler(object sender, HelloWebServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class HelloWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal HelloWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetInstallationDataCompletedEventHandler(object sender, GetInstallationDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetInstallationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInstallationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void ImportHourlyStatisticsDataCompletedEventHandler(object sender, ImportHourlyStatisticsDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ImportHourlyStatisticsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportHourlyStatisticsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void InsertTreasuryEntriesCompletedEventHandler(object sender, InsertTreasuryEntriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class InsertTreasuryEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertTreasuryEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetZonesDataCompletedEventHandler(object sender, GetZonesDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetZonesDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetZonesDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetBarPositionsDataCompletedEventHandler(object sender, GetBarPositionsDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetBarPositionsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBarPositionsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetMachineDataCompletedEventHandler(object sender, GetMachineDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetMachineDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetMachineDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetLatestMeterHistoryCompletedEventHandler(object sender, GetLatestMeterHistoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetLatestMeterHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLatestMeterHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetLatestSiteBatchIDCompletedEventHandler(object sender, GetLatestSiteBatchIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetLatestSiteBatchIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLatestSiteBatchIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void InsertReadCompletedEventHandler(object sender, InsertReadCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class InsertReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void CreateInstallationCompletedEventHandler(object sender, CreateInstallationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class CreateInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void EnhancedEnrollmentForOfflineCompletedEventHandler(object sender, EnhancedEnrollmentForOfflineCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class EnhancedEnrollmentForOfflineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal EnhancedEnrollmentForOfflineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void CloseInstallationCompletedEventHandler(object sender, CloseInstallationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class CloseInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CloseInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void ConvertInstallationCompletedEventHandler(object sender, ConvertInstallationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ConvertInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ConvertInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SwapInstallationCompletedEventHandler(object sender, SwapInstallationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class SwapInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SwapInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void ImportInstallationUpdateCompletedEventHandler(object sender, ImportInstallationUpdateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ImportInstallationUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportInstallationUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetInstallationNumberCompletedEventHandler(object sender, GetInstallationNumberCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetInstallationNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInstallationNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void ImportMeterHistoryCompletedEventHandler(object sender, ImportMeterHistoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ImportMeterHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportMeterHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void UpdateBarPositionCentralStatusBySiteIDCompletedEventHandler(object sender, UpdateBarPositionCentralStatusBySiteIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class UpdateBarPositionCentralStatusBySiteIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateBarPositionCentralStatusBySiteIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void UpdateSiteStatsInEnterpriseCompletedEventHandler(object sender, UpdateSiteStatsInEnterpriseCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class UpdateSiteStatsInEnterpriseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateSiteStatsInEnterpriseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetPlannedConversionCompletedEventHandler(object sender, GetPlannedConversionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetPlannedConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPlannedConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void PlannedConversionCompletedEventHandler(object sender, PlannedConversionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class PlannedConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PlannedConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetCurrentServiceCallsCompletedEventHandler(object sender, GetCurrentServiceCallsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetCurrentServiceCallsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCurrentServiceCallsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetOpenServiceCallsCompletedEventHandler(object sender, GetOpenServiceCallsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetOpenServiceCallsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOpenServiceCallsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetServiceNotesCompletedEventHandler(object sender, GetServiceNotesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetServiceNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetServiceNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void CloseServiceCallCompletedEventHandler(object sender, CloseServiceCallCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class CloseServiceCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CloseServiceCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void InsertServiceNotesCompletedEventHandler(object sender, InsertServiceNotesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class InsertServiceNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertServiceNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void EscalateServiceCompletedEventHandler(object sender, EscalateServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class EscalateServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal EscalateServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetBarPositionStatusCompletedEventHandler(object sender, GetBarPositionStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetBarPositionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBarPositionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetWeeklyCollectionDetailsCompletedEventHandler(object sender, GetWeeklyCollectionDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetWeeklyCollectionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetWeeklyCollectionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetHqInstallationIDCompletedEventHandler(object sender, GetHqInstallationIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetHqInstallationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHqInstallationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetCashDeskServiceFaultsCompletedEventHandler(object sender, GetCashDeskServiceFaultsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetCashDeskServiceFaultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCashDeskServiceFaultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetRemediesCompletedEventHandler(object sender, GetRemediesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetRemediesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRemediesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void UpdateInstallationGameCompletedEventHandler(object sender, UpdateInstallationGameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class UpdateInstallationGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateInstallationGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetAssetDetailsCompletedEventHandler(object sender, GetAssetDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetAssetDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAssetDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}