//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MeterAdjustmentTool {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private AuditReportDataTable tableAuditReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AuditReport"] != null)) {
                    base.Tables.Add(new AuditReportDataTable(ds.Tables["AuditReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AuditReportDataTable AuditReport {
            get {
                return this.tableAuditReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AuditReport"] != null)) {
                    base.Tables.Add(new AuditReportDataTable(ds.Tables["AuditReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAuditReport = ((AuditReportDataTable)(base.Tables["AuditReport"]));
            if ((initTable == true)) {
                if ((this.tableAuditReport != null)) {
                    this.tableAuditReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAuditReport = new AuditReportDataTable();
            base.Tables.Add(this.tableAuditReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAuditReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AuditReportRowChangeEventHandler(object sender, AuditReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AuditReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBatchRef;
            
            private global::System.Data.DataColumn columnBar_Position_Name;
            
            private global::System.Data.DataColumn columnCollection_batch_No;
            
            private global::System.Data.DataColumn columnBatchDate;
            
            private global::System.Data.DataColumn columnBatchTime;
            
            private global::System.Data.DataColumn columnProcessType;
            
            private global::System.Data.DataColumn columnMeter;
            
            private global::System.Data.DataColumn columnBeforeImage;
            
            private global::System.Data.DataColumn columnAfterImage;
            
            private global::System.Data.DataColumn columnChangeTime;
            
            private global::System.Data.DataColumn columnUser_Name;
            
            private global::System.Data.DataColumn columnAdjSpecficMeter_Name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AuditReportDataTable() {
                this.TableName = "AuditReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AuditReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AuditReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchRefColumn {
                get {
                    return this.columnBatchRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Bar_Position_NameColumn {
                get {
                    return this.columnBar_Position_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Collection_batch_NoColumn {
                get {
                    return this.columnCollection_batch_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchDateColumn {
                get {
                    return this.columnBatchDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchTimeColumn {
                get {
                    return this.columnBatchTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessTypeColumn {
                get {
                    return this.columnProcessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeterColumn {
                get {
                    return this.columnMeter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BeforeImageColumn {
                get {
                    return this.columnBeforeImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AfterImageColumn {
                get {
                    return this.columnAfterImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChangeTimeColumn {
                get {
                    return this.columnChangeTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn User_NameColumn {
                get {
                    return this.columnUser_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjSpecficMeter_NameColumn {
                get {
                    return this.columnAdjSpecficMeter_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AuditReportRow this[int index] {
                get {
                    return ((AuditReportRow)(this.Rows[index]));
                }
            }
            
            public event AuditReportRowChangeEventHandler AuditReportRowChanging;
            
            public event AuditReportRowChangeEventHandler AuditReportRowChanged;
            
            public event AuditReportRowChangeEventHandler AuditReportRowDeleting;
            
            public event AuditReportRowChangeEventHandler AuditReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAuditReportRow(AuditReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AuditReportRow AddAuditReportRow(string BatchRef, string Bar_Position_Name, int Collection_batch_No, string BatchDate, string BatchTime, string ProcessType, string Meter, int BeforeImage, int AfterImage, System.DateTime ChangeTime, string User_Name, string AdjSpecficMeter_Name) {
                AuditReportRow rowAuditReportRow = ((AuditReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BatchRef,
                        Bar_Position_Name,
                        Collection_batch_No,
                        BatchDate,
                        BatchTime,
                        ProcessType,
                        Meter,
                        BeforeImage,
                        AfterImage,
                        ChangeTime,
                        User_Name,
                        AdjSpecficMeter_Name};
                rowAuditReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAuditReportRow);
                return rowAuditReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AuditReportDataTable cln = ((AuditReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AuditReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBatchRef = base.Columns["BatchRef"];
                this.columnBar_Position_Name = base.Columns["Bar Position Name"];
                this.columnCollection_batch_No = base.Columns["Collection_batch_No"];
                this.columnBatchDate = base.Columns["BatchDate"];
                this.columnBatchTime = base.Columns["BatchTime"];
                this.columnProcessType = base.Columns["ProcessType"];
                this.columnMeter = base.Columns["Meter"];
                this.columnBeforeImage = base.Columns["BeforeImage"];
                this.columnAfterImage = base.Columns["AfterImage"];
                this.columnChangeTime = base.Columns["ChangeTime"];
                this.columnUser_Name = base.Columns["User Name"];
                this.columnAdjSpecficMeter_Name = base.Columns["AdjSpecficMeter_Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBatchRef = new global::System.Data.DataColumn("BatchRef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchRef);
                this.columnBar_Position_Name = new global::System.Data.DataColumn("Bar Position Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBar_Position_Name);
                this.columnCollection_batch_No = new global::System.Data.DataColumn("Collection_batch_No", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollection_batch_No);
                this.columnBatchDate = new global::System.Data.DataColumn("BatchDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchDate);
                this.columnBatchTime = new global::System.Data.DataColumn("BatchTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchTime);
                this.columnProcessType = new global::System.Data.DataColumn("ProcessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessType);
                this.columnMeter = new global::System.Data.DataColumn("Meter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeter);
                this.columnBeforeImage = new global::System.Data.DataColumn("BeforeImage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBeforeImage);
                this.columnAfterImage = new global::System.Data.DataColumn("AfterImage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAfterImage);
                this.columnChangeTime = new global::System.Data.DataColumn("ChangeTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChangeTime);
                this.columnUser_Name = new global::System.Data.DataColumn("User Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_Name);
                this.columnAdjSpecficMeter_Name = new global::System.Data.DataColumn("AdjSpecficMeter_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjSpecficMeter_Name);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AuditReportRow NewAuditReportRow() {
                return ((AuditReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AuditReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AuditReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AuditReportRowChanged != null)) {
                    this.AuditReportRowChanged(this, new AuditReportRowChangeEvent(((AuditReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AuditReportRowChanging != null)) {
                    this.AuditReportRowChanging(this, new AuditReportRowChangeEvent(((AuditReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AuditReportRowDeleted != null)) {
                    this.AuditReportRowDeleted(this, new AuditReportRowChangeEvent(((AuditReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AuditReportRowDeleting != null)) {
                    this.AuditReportRowDeleting(this, new AuditReportRowChangeEvent(((AuditReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAuditReportRow(AuditReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AuditReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AuditReportRow : global::System.Data.DataRow {
            
            private AuditReportDataTable tableAuditReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AuditReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAuditReport = ((AuditReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchRef {
                get {
                    try {
                        return ((string)(this[this.tableAuditReport.BatchRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchRef\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.BatchRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bar_Position_Name {
                get {
                    try {
                        return ((string)(this[this.tableAuditReport.Bar_Position_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bar Position Name\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.Bar_Position_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Collection_batch_No {
                get {
                    try {
                        return ((int)(this[this.tableAuditReport.Collection_batch_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Collection_batch_No\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.Collection_batch_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchDate {
                get {
                    try {
                        return ((string)(this[this.tableAuditReport.BatchDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchDate\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.BatchDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchTime {
                get {
                    try {
                        return ((string)(this[this.tableAuditReport.BatchTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchTime\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.BatchTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessType {
                get {
                    try {
                        return ((string)(this[this.tableAuditReport.ProcessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProcessType\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.ProcessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Meter {
                get {
                    try {
                        return ((string)(this[this.tableAuditReport.MeterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Meter\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.MeterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BeforeImage {
                get {
                    try {
                        return ((int)(this[this.tableAuditReport.BeforeImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BeforeImage\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.BeforeImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AfterImage {
                get {
                    try {
                        return ((int)(this[this.tableAuditReport.AfterImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AfterImage\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.AfterImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ChangeTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAuditReport.ChangeTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChangeTime\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.ChangeTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string User_Name {
                get {
                    try {
                        return ((string)(this[this.tableAuditReport.User_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User Name\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.User_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjSpecficMeter_Name {
                get {
                    try {
                        return ((string)(this[this.tableAuditReport.AdjSpecficMeter_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjSpecficMeter_Name\' in table \'AuditReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAuditReport.AdjSpecficMeter_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchRefNull() {
                return this.IsNull(this.tableAuditReport.BatchRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchRefNull() {
                this[this.tableAuditReport.BatchRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBar_Position_NameNull() {
                return this.IsNull(this.tableAuditReport.Bar_Position_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBar_Position_NameNull() {
                this[this.tableAuditReport.Bar_Position_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCollection_batch_NoNull() {
                return this.IsNull(this.tableAuditReport.Collection_batch_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCollection_batch_NoNull() {
                this[this.tableAuditReport.Collection_batch_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchDateNull() {
                return this.IsNull(this.tableAuditReport.BatchDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchDateNull() {
                this[this.tableAuditReport.BatchDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchTimeNull() {
                return this.IsNull(this.tableAuditReport.BatchTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchTimeNull() {
                this[this.tableAuditReport.BatchTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessTypeNull() {
                return this.IsNull(this.tableAuditReport.ProcessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessTypeNull() {
                this[this.tableAuditReport.ProcessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeterNull() {
                return this.IsNull(this.tableAuditReport.MeterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeterNull() {
                this[this.tableAuditReport.MeterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBeforeImageNull() {
                return this.IsNull(this.tableAuditReport.BeforeImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBeforeImageNull() {
                this[this.tableAuditReport.BeforeImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAfterImageNull() {
                return this.IsNull(this.tableAuditReport.AfterImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAfterImageNull() {
                this[this.tableAuditReport.AfterImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeTimeNull() {
                return this.IsNull(this.tableAuditReport.ChangeTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangeTimeNull() {
                this[this.tableAuditReport.ChangeTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUser_NameNull() {
                return this.IsNull(this.tableAuditReport.User_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUser_NameNull() {
                this[this.tableAuditReport.User_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjSpecficMeter_NameNull() {
                return this.IsNull(this.tableAuditReport.AdjSpecficMeter_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjSpecficMeter_NameNull() {
                this[this.tableAuditReport.AdjSpecficMeter_NameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AuditReportRowChangeEvent : global::System.EventArgs {
            
            private AuditReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AuditReportRowChangeEvent(AuditReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AuditReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591